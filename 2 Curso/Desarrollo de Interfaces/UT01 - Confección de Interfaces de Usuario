INTRODUCCIÓN

INTERFAZ DE USUARIO, es el elemento de una aplicación informática que permite al usuario comunicarse con ella.

Tipos de interfaces:
  -> TEXTUALES, la comunicación se produce por médio de la insercción de órdenes o comandos escritos en un intérprete de órdenes.
  -> GRÁFICAS, consta de elementos visuales con los que se interraciona.
  -> TÁCTILES, comunicación producida mediante un dispositivo táctil.
  -> NATURALES, intenta imitar la forma de interacción humana, permitiendo una interacción más intuitiva, fácil y sin esfuerzo. (Gestos, expresiones, por voz, ...)

COMPONENTES, elementos gráficos atómicos que tienene sus propias características y funciones que se conbinan para formar la interfaz.

Algunos componentes típicos
  -> ETIIQUETAS, permiten situar texto en la interfaz, no son interactivos.
  -> CAMPOS DE TEXTO, campos de una línea para insertar texto.
  -> ÁREAS DE TEXTO, cuadros en los que escribir texto.
  -> BOTONES, aréas pulsables para realizar alguna acción.
  -> BOTONES DE RÁDIO, botones circulares que presentan agrupados para realizar una seleccion de un único elemento entre ellos. Para seleccionar entre un conjunto.
  -> CUADROS DE VERIFICACIÓN, botones rectangulares, usados para marcar alguna opción, aparecen un tic cuando se seleccionan.
  -> IMÁGENES, añaden información gráfica.
  -> PASSWORD, cuadro de texto en el que aparecen los carácteres ocultos.
  -> LISTAS, conjunto de datos presentados en un cuadro en los que se puede seleccionar uno o varios.
  -> LISTAS DESPLEGLABLES, combinación de cuadro de texto y lista, se puede escribri o seleccionar un elemento de una lista oculta que se puede desplegar.


LENGUAJES DESCRIPTIVOS PARA LA DEFINICIÓN DE INTERFACES

Permiten definir la estructura, el estilo y la interacción de la interfaz del usuario, facilitando la comunicación entre diseñadores y desarrolladores y 
asegurando una implementación coherente y eficiente de la interfaz en la aplicación final.

  -> XML (eXtensible Markup Language), lenguaje de marcado utilizado para describir datos estructurados.
En interfaces se puede utilizar para definir la estructura y los elementos de la interfaz, sus propiedades y atributos.
  -> HTML (HyperText Markup Language), empleado en la definición de la estructura básica de interfaces de usuario en aplicaciones web.
  -> CSS (Cascading Style Sheets), lenguaje de estilo utilizado para definir la presentación y el aspecto visual de los elementos de una web, se puede combinar con HTML o XML.
  -> JSON (JavaScrip Object Notation), su proposito principal es el intercambio de datos, tambíen se puede utilizar para describir la estructura de una interfaz y las propiedades de sus elementos.
  -> XAML (eXtensible Application Markup Languaje), lenguaje de marcado de Microsoft, se utiliza para interfaces en aplicaciones de la plataforma .NET.
  -> QML (Qt Meta-Object Language), lenguaje de marcado utilizado en desarrollo de interfaces en el framework Qt.


LIBRERÍA DE COMPONENTES

  -> JFC - JAVA Fundation Classes, incluyen librerías para crear interfaces gráficas de las aplicaciones Java y applets de Java:
    -> AWT, común a todas las plataformas, practicamente en desuso.
    -> Swing, totalmente multiplataforma porque no tienen códiigo nativo. Es el estandar actual para el desarrollo de interfaces gráficas en Java.
    -> JavaFX, reemplazo de Swing, más moderna y rica.
  -> Librerias MSDN de Microsoft (C#, ASP, ...):
    -> .NET Framework, componente integral que permite la compilación y ejecución y webs como la propia librería de componentes que permite su creación.
  -> Librerias Basadas en XML:
    Normalmente disponene de mecanimos para elaborara las interfaces y traducirlas a diferentes lenguajes de programación, para integrarlas en la aplicacion final.
  -> Otras API (Application Programming Interface)
    -> DirectX, plataforma Microsoft para facilitar el manejo de los elementos multimedia.
    -> GTX (GIMP Toolkit), librería del equipo GTK+. El entorno gráfico de GNOME utiliza esta librería.
    -> QT, utilizada por el entorno gráfico KDE, utiliza C++ y puede ser integrado en otros lenguajes.
    -> Dear ImGui (Immediate mode GUI), libreria ligera que permite crear interfaces de usuario en aplicaciones interactivas en tiempo real.


HERRAMIENTAS PARA LA ELABORACIÓN DE INTERFACES
  -> Visual Estudio, entorno de desarrollo con la biblioteca .NET framework de Microsoft.
  -> NetBeans, IDE destribuido por Oracle bajo licencia GNU GPL, desarrollado en Java, pertmite crear aplicaciones en diferentes lenguajes.
  -> Eclipse, IDE distribuido bajo la Licencia Pública Eclipse (EPL).
  -> JDeveloper, IDE desarrollado por Oracle Corporation para Java, HTML, XML, ...
  -> CodeLite IDE, OpenSource, multiplataforma y gratuito.
  -> JetBrains, conjunto de IDEs orientadas a cubrir diferentes necesidades de empresas y particulares.
  -> BlueFish, compatible con windosws, linux, mac, freebsd, openbsd y solaris.
  -> Atom, IDE que permite programar en diferentes lenguajes, un editor opensource.
  -> Qt Creator, desarrollado por Nokia, IDA para interfaces gráficas y multiplataforma.


CONTENEDORES

Un FORMULARIO es una ventana que dispone 3 botones (minimize, maximize and close), una barra de título y está delimitado por unos bordes.
Es la base para crear una aplicación de escritorio.

Una aplicacion se compone de una serie de formularios.

CONTENEDOR Java, es un componente que permite incluir otros componentes incluidos contenedores que se usarán para distribuir los controles.
Los contenedores forman una ESTRUCTURA JERÁRQUICA.

Un formulario está formado por un contenedor de nivel superior que inclulle un contentpanel(panel de contenido) que permite añadir otros componentes.
Como contenedor de nivel superior se puede elegir entre:
  -> Ventana (JFrame), un formulario con título, botones de maximizar, minimizar o cerrar y borde.
  -> Dialogo (JDialog), formularios que suelen solicitar información al usuario, pueden ser modales o no.
  -> Applet (JApplet), ventana que ejecuta una aplicaciçon Java en el contexto de una página web.


CONTENEDORES SECUNDARIOS

Tambien se interpretan como diálogos los siguientes componentes:
  -> PANEL DE OPCIONES (JOptionPane), genera ventanas con botones para responder cuestiones ocn respuestas del tipo si-no, acept-cancel, ...
  -> SELECTOR DE ARCHIVOS (JFileChooser), permite seleccionar un archivo del sistema de archivos del equipo deonde se ejecuta la aplicación.
  -> SELECTOR DE COLORES (JColorCooser), permite seleccionar entre un conjungo de colores y devolverlo usando el código adecuado.

Otro tipo de contenedores para distribuir el resto de los controles que se incluyen en la ventana principal, los más habituales:
  -> PANELES (JPanel), representa un contenedor intermedia, cuya función principal es la de colocar controles.
  -> BARRA DE MENÚS (JMenu), permite la creación de menús complejos de opciones.
  -> BARRA DE HERRAMIENTAS (JToolBar), se utiliza pra contener iconos de acceso a las opciones de la aplicación.
  -> PESTAÑAS (JTabbedPane), tipo particular de panel que permite la distribución de elementos en pestañas o tarjetas.
  -> PANELES DESLIZABLES (JScrollPne), tipo especial de panel que permite desplazar sus contenidos de manera automática.
  -> VENTANAS INTERNAS (JInternalFrame), ventanas hijas que no pueden rebasar los límites de la ventana padre donde se han creado.
  -> PANELES DIVIDIDOS (JSplitPane), permite visualizar dos componentes, uno a cada lado, asignado espacio dinámicamente a cada uno.


COMPONENTES DE LA INTERFAZ

Los componentes o controles gráficos de un formulario, son elementos gráficos que se anida en los contenedores para formar aplicaciones.
Muestran información y la recaban del usuario.

LAYOUT, reglas de colococación de componentes en el formulario que establecen el orden y la posición en la que deben ser mostrados.

MANEJO DE EVENTOS, gestion de la interaccion de un compenente con el usuario.
Una acción sobre el componente debe provocar un EVENTO.


AÑADIR Y ELIMINAR COMPONENTES DE LA INTERFAZ - IDE NetBeans

Los componentes se pueden añadir desde la paleta, que se suele anclar a la derecha de la interfaz.

Categorías:
  -> CONTENEDOROS SWING, secundarios en la jerarquía, se usan para distribuir y organizar el resto de controladores.
  -> CONTROLES SWING, básicos para crear una interfaz útil para comunicarse con el user y mostrar o solicitar info.
  -> RELLENADORES SWING, mecanismo que posibilita que ciertos componentes ocupen el espacio adicional.
  -> MENUS SWING, incluyen controladores para crear menús de aplicación complejos, con varios bloques, elementos activos, etc.
  -> VENTANAS SWING, permiten añadir ventanas (JFrame), diálogos (JDialog), selectores de fichero y colores (JFileChooser u JColorChooser) y paneles de opciones (JOptionPane).

Para añadir componentes a la interfaz, seleccionar el control en la paleta y pinchar sobre la interfar que se estra construyendo.
Opción DISEÑO LIBRE, aparecen sobre un formulario unas guías que permiten colocar con facilidad el control.

Para eliminar un control basta con seleccionarlo y pulsar Supr, o seleccionar Suprimir en el menú contextual.


MODIFICACIÓN DE PROPIEDADES

Con el control seleccionado accedes a sus propiedades en el panel propiedades.
Se suele comenzar modificando su nombre para localizarlo con más facilidad en el código de la clase que genera el formulario.


UBICACIÓN Y ALINEAMIENTO DE LOS COMPONENTES

Layout, herramienta empleada internamente el mecanismo de Java para disponer los elementos.
Swing dispone de los siguientes tipos de distribuciones:
  -> BoderLayout, aloja los componentes en los límites del formulario, cuando se coloca se indica si van al norte, sur, este u oeste.
  -> GridLayout, diseña mediante una rejilla, en la que los componentes se organizan por filas y columnas.
  -> GridBagLayout, como GridLayout, pero permite a un componente que ocupe más de una celda
  -> CardLayout, diseño por paneles. Permite la colocación de distintos componentes en momentos distintos de la ejecución.
  -> BoxLayout, diseño en caja, coloca los componentes en una fila o columna ajustándose al espacio que haya.
  -> FlowLayout, diseña alojando los componentes de izquierda a derecha mientras quede espacio, si no queda, pasa a la siguiente fila.
  -> GroupLayout, trabaja por separado la distribución vertical y horizontal para definir exactamente el posicionamiento de los componentes.
  -> SpringLayout, flexible y se usa para herramientas de diseño gráfico de interfaces, se especifican las relaciones entre los límites de los componentes bajo su control.


ENLACE DE COMPONENTES A ORÍGENES DE DATOS
Poder acceder a la información contenida en una base de datos por una aplicacin le aporta flexibilidad y potencia.


PATRONES DE ARQUITECTORA DE LAS APLICACIONES GRÁFICAS
Patrones de arquitectura que se utilizan para organizar y estructural el código de ls aplicaciones, esto ayuda a separar responsabilidades y facilitan el mantenimiento, estabilidad y reutilización del código.

Entre los patrones de arquitectura más comunes se encuentran:
  -> MODELO-VISTA-CONTROLADOR (MVC), se basa en la separación de la lógica de negocio en tres componentes principales:
    -> MODELO, representa los datos y la lógica de la aplicación.
    -> VISTA, se refeiere a la interfaz de usuario. Muestra los datos al user y recibe sus interacciones.
    -> CONTROLADOR, actúa como intermediario entre el Modelo y la Vista.
  -> MODELO-VISTA-PRESENTADOR (MVP), variante del patron MVC se enfoca en mejorar las pruebas unitarias. El presentador toma un papel más activo que el Controlador.
     La vista no conoce directamente al Modelo, sino que interactúa con el Presentador que se encarga de actualizar la Vista y el Modelo.
  -> MODELO-VISTA-VISTA-MODELO (MVVM), utilizado en el desarrollo de apps moviles y web con elances de datos(data binding). Se compone de:
    -> MODELO, representa los datos y la lógia de negocio, de manera siminar al patrón MVC.
    -> VISTA, la interfaz de usuario.
    -> VISTA-MODELO, actúa como intermediario entre Modelo Y la Vista pero permite la utilización de enlaces de datos para sincronizar automáticamente la Vista con el Modelo.
  -> PATRÓN DE NAVEGACIÓN, se enfoca en la estructura de navegación dentro de la aplicación, puede conbinarse con otros petrones, define como los users se mueven entre las vistas de la aplicación.
  -> PATRÓN DE COMANDO, utilizado para encapsular una solicitud en un objeto, permitiendo parametrizar a los clientes con diferentes solicitudes, hacer cola para ellas o llevar a cabo operaciones de registro.


ASOCIACIÓN DE ACCIONES A EVENTOS

Event Sources,  los objetos donde se  producen los eventos.
Event Listeners, registran los objetos que habrán de gestionarlos.
Interfaz Listener, se corresponden con los tipos de eventos que se pueden producir.


DIÁLOGOS MODALES Y NO MODALES

El DIALOGO es un área visual que contiene los elementos de interfaz de usuario mostrando la aplicación y permitiendo la entrada de datos.
Se representan casi siempre como objetos de dos dimensiones colocados en el escritorio.

La MODALIDAD se refiere a la forma de mantener el foco que va a tener el diálogo con respecto a los demás diálogos:
  -> DIALOGO NO MODAL, si una vez qque se encuentra activo permite alternanr el foco a cualquier otro díalogo abierto en el sistema o dentro de la APP.
  -> DIALOGO MODAL RESPECTO A UNA APLICACIÓN, permiten alternar el foco a otros diálogos del sistema, pero no al que le da origen hasta que se produzca una determinada acción sobre ella.
  -> DIALOGO MODAL RESPECTO AL SISTEMA, no va ceder el foco a ningua otra aplicación hasta que se produzca una determinada acción sobre él.


DIÁLOGOS MODALES
Se utilizan de forma generalizada en aplicacines y por el propio sistema operativo.

En Java:
  -> Un objeto de la clase Frame será el diálogo padre de toda la aplicación.
  -> JDialog, permite la creación de diálogos modlaes.
Para crear diálogos modales, en el constructor se establecera el parámetro "modal" a "true", de forma que este mantiene el foco, impiediendo que pueda ser tomadao por cualquier otro.

- Clase static clas ModalityType, sirve para definir el tipo de bloqueo, o alcance del bloqueo en una aplicación, su enumeración contiene:
  -> APPLICATION_MODAL, bloquea todas las ventanas de la app, excepto las derivadas de ella.
  -> DOCUMENT_MODAL, bloquea la ventana padre de la ventana y su jerarquía superior.
  -> MODELESS, no bloquea ninguna ventana.
  -> TOOLKIT_MODAL, bloquea las ventanas de nivel superior que corren en el mismo TOOLKIT.

- Clase ModalExclusionType, para excluir del bloqueo a una ventana o diálogo, opciones de enumeración:
  -> APPLICATION_EXCLUDE, la ventana que utiliza este valor de enumeración no será bloqueada por ningún diálogo de la aplicación.
  -> NO_EXCLUDE, indica que la ventana no estrá excluida del bloqueo si este ocurriera.
  -> TOOLKIT_EXCLUDE, indica que no se bloqueará esta ventana si se llamase a APPLICATION_MODAL o TOOLKIT_MODAL.


DIALOGOS NO MODALES
Se puede pasar el foco de un diálogo a otro sin ningún tipo de restricción.


EDICIÓN DE CÓDIGO GENERADO POR HERRAMIENTAS DE DISEÑO.

El IDE automáticamente genera bloques de código al realizar el diseño de una ventana con herramientas gráficas, esté se muestra enmarcado dentro del fichero .java.
Se puede modificar editándolo en la ventana "Fuente"(source). Además, se puede escribir código personalizado y especifico.


CLASES, PROPIEDADES, MÉTODOS.

Java Foundation Classes (JFC), conjunto de clases agradables visualmente y fáciles de utilizar para el programador, constituidas por 5 grupos:
  -> AWT, bibliotecas de clases Java para el desarrollo de Interfaces gráficas de usuario.
  -> Java 2D, conjunto de clases gráficas bajo licencia IBM/Taligent.
  -> Accesiblididad, clases para facilitar el uso de ordenadores y tecnologia a personas con deficiencias visuales.
  -> Drag an Drop, clases en las que se soporta los JavaBeans.
  -> Swing, conjunto de componentes bien descritos y especificados, de forma que su presentación visual es independiente de la plataforma donde se ejecuta la aplicacion que utilice sus clases.


CLASES
En Java actualmente se utilizán los componentes Swing. Para cear interfaces gráficas de usuario combina los componentes de la clas JCompoent en contenedores de alto nivel:
  -> JWindow, ventana sin barra de título ni botones.
  -> JFrame, ventana con barra de título y botones que permiten su manipulación.
  -> JDialog, permite visualizar un cuadro de diálogo.
  -> JApplet permite crear un applet de Swing.:

Componentes derivados de la clase JComponent:
  -> JComponent, clase base para los componentes Swing:
    -> JButton.
    -> JMenuItem, elemento de un menú:
      -> JCheckBoxMenuItem.
      -> JMenu.
      -> JRadioButtonMenuItem.
    -> JToggleButtom, botón de estados:
      -> JCheckBoc.
      -> JRadioButton.
y unos cuantos más ...


PROPIEDADES
Las propiedades de los componentes permiten adaptar su comportamiento y apariencia

Ver listado si hace falta ...


MÉTODOS
Cada componente dispone de un conjunto complemento de métodos que permite comunicarse con el componentes y modificar su aspecto o comportamiento

Ver listado de destacados ...


EVENT, LISTENERS

Los eventos se agrupan en función al componente que lo produce o la acción que lo provoca.

Elementos de un Evento:
  -> EVENT SOURCE, componente que origina el evento.
  -> EVENT LISTENER, el encargado de atrapar o escuchar el evento.
  -> EVENT HANDLER (manejador), método que permite implementar la interfaz. 

El event handler recibe un objeto ActionEvent que contiene información sobre el evento disparado, el manejador descifra el evento y procesa lo solicitado por el user.

Un evento puede ser escuchado por más de un manejador de eventos.


LISTENERS
Es el objeto de la clase que implementa la interfaz de escucha de un evento y que contien el método de respuesta al propio evento.

Cada interfaz de escucha contiene los métodos para gestionar un determinado grupo de eventos.
La interfaz de escucha WindowsListener define el formato de los métodos para la gestion de los eventos de ventana.

Cada interfaz de escucha contiene sus propios métodos de gestión de eventos.

Para responder a un evento dentro de una aplicación, se debe definir una clase que interprete la interfaz de escucha correspondiente al tipo de evento que se quiera gestionar.














