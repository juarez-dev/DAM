CREACIÓN DE COMPONENTES VISUALES

COMPONENTE SOFTWARE, clase creada para ser reutilizada y que puede ser manipulada por una herramienta de desarrollo de aplicaciones viusles.
ESTADO que se almacena en un conjunto de propiedades, las cuales pueden ser modificadas para adaptar el componente al programa en el que se inserte.
Tiene un COMPORTAMIENTO que se define por los eventos ante los que responde y los métodos que ejecuta ante dichos eventos.

EVENTOS, las acciones que los users van a provocar sobre los componentes.

Un subconjunto de los atributos y los métodos forman la interfaz del componente.

Normas que debe cumplir una clase para que sea un componente:
  -> Debe poder modificarse para adaptarse a la aplicación en la que se integra.
  -> Debe tener persistencia, debe poder guardad el estado de sus propiedades cuando han sido modificadas.
  -> Debe tener introspeccion, debe permitir a un IDE reconocer elementos de diseño como los nombres de las funciones miembors o métodos y definiciones de las clases y devolver esa información
  -> Debe poder gestionar eventos.

Ventajas del desarrollo basado en componentes:
  -> Más sencillo, requiere menos tiempo y coste.
  -> Disminución de errores en el software.


ELEMENTOS DE UN COMPONENTES
  
PROPIEDADES, un tipo específico de atributos que representan características de un componente que afectan a su apariencia o su comportamiento.
Son accesibles desde fuera de la clase y forman parte de su interfaz.
Suelen estar asociadas a un atributo interno.
Pueden examinarse y modificarse mediante métodos o funciones miembro, que acceden a la propiedad y son de 2 tipos:
  -> Setters, permiten establecer el valor de la propiedad.
  -> Getters, permiten leer el valor de la propiedad.


MODIFICAR GRÁFICAMENTE EL VALOR DE UNA PROPIEDAD CON UN EDITOR

INTROSPECCIÓN, capacidad de un componentes de identificar sus propiiedades simplemente detectando parejas de operaciones get/set.

Un EDITOR DE PROPIEDAD es una herramienta para personalizar un tipo de propiedad en particular. 
Se utilizan en la ventana de Propiedades, donde se determina el tipo de la propiedad, se busca un editor de propiedades apropiado y se muestra el valor actual de la propiedad de una manera adecuada a la clase.

La creación de un editor de propiedad usando Java supone programar una clase que implemente la interfaz PropertyEditor, que proporciona métodos para especificar cómo se debe mostrar una propiedad en la hoja de propiedades.
Su name debe ser el name de la property más la word Editor.

Por default la class PropertyEditorSupport que implement PropertyEditor proporciona los editorés más empleados, incluyendo los basicos Color y Font.


PROPIEDAD SIMPLE, representa un único valor, un número, verdadero o falso o un texto, por lo tanto, tomará valores dentro de un tipo de datos.
  Tiene asociados los métodos getter y setter para establecer y rescatar ese valor.

PROPIEDAD INDEXADA, representa un conjunto de elementos, que suelen representarse mediante un vector y
se identifican mediante los siguientes patrones de opreaciones para leer o escribir elementos individuales del vector o el vector entero.

PROPIEDADES COMPARTIDAS O LIGADA
Los objetos que tienen una propiedad compartida o ligada notifican a otros objetos oyentes interesados, cuando su valor cambia, permitiendolos relizar algun tipo de acción.
Cuando la propidead cambia, se crea un bojeto que contiene información acerca de su propiedad y lo pasa a los otros objetos oyentes intersados en el cambio.

PropertyChangeEvent, clase a través de la cual se realiza la notificación del cambio, los objetos que deseen ser notificados debén registrarse cómo AUDITORES.
  -> public void addPropertyChangeListener(PropertyChageListener 1)
  -> public void removePropertyChangeListener(PropertyhangeListener 1)

Para registrar auditores de una propidad específica:
  -> public void addPropertyNameListener(PropertyChangeListener 1)
  -> public void removePropertyNameListener(PropertyChangeListener 1)


PROPIEDADES RESTRINGIDAS
Similar a una ligada salvo que los objetos oyentes que se les notifica el cambio de valor tienen la opcioón de vetar cualquier cambio en el valor de dicha propidad.

Los métodos utilizados, además de los anteriores para las propiedades ligadas, son:
  -> addPropertyVetoableListener()
  -> removePropertyVetoableListener()
  -> addPropertyNameListener()
  -> removePropertyNameListener()


EVENTOS Y ASOCIACIÓN DE ACCIONES

Para que un componente pueda reconocer el evento y responder ante el tendrás que hacer lo siguiente:
  -> Crear una clase para los eventos que se lancen.
  -> Definir una interfaz que represente el listener asociado al evento, debe incluir una operación para el procesamiento del evento.
  -> Definir 2 operaciones, para añadir y eliminar listeners. Si queremos tener más de un oyente para el evento tendremos que almacenar internamente estos listeners en una estructura de datos como ArrayList o LinkedList.
  -> Finally, recorrer la estructura de datos interna llamando a la operación de procesamiento del evento de todos los listeners registrados.


INTROSPECCIÓN, es una característica que permite a las herramientas de programación visual arrastrar y soltar un componente en la zona de diseño de una aplicación y determinar dinámicamente qué métodos de interfaz,
propiedades y eventos del componente están disponibles.

REFLEXIÓN, caracteristica que busca aquellos métodos definidos como públicos que empiezan por get/set, es decir, se basa en el uso de patrones de diseño,
en establecer reglas en la construcción de la clase de forma que mediante el uso de una nomenclatura específica se permita a la herramienta encontrar la interfaz de un componente.

PERSISTENCIA DEL COMPONENTE
Almacenamiento del estado de una clase para que perdure a través del tiempo, para implementarla es necesario que pueda ser almacenada en un archivo y recuperado posteriormente.
  MECANISMO DE SERIALIZACIÓN, es el mecanismo que implementa la persistencia:
    -> Serializar, proceso de almacenar el estado de una clase en un archivo.
    -> Deserializar, al proceso de recuperar el estado de una clase de un archivo.

Para la persistencia en java, las clases deben implementar interfaces java.io.Serializable o java.io.Externalizable que ofrecen la posiblidad de serialización automática o de programarla según necesidad:
  -> SERIALIZACIÓN AUTOMÁTICA, se implementa la interfaz Serializable que proporciona serialización mediante la utilización de las herramientas de Java Object Serialization.
     Para poder usar la interfaz hay que tener en cuenta:
      -> Las clases deben tener un constructor sin argumentos que será llamado cuando un objeto sea "reconstituido" desde un fichero .ser.
      -> Todos los campos exepto static y transient son serializados. Se utilizara el modificador transient para especificar los campos que no queremos serializar y especificar las clases que no son serializables.
      -> Se puede programar una serialización propia implementando los siguientes métodos:
        * private void writeObject(java.io.ObjectOutputStream out) throws IOException;
        * private void readObject(java.io.objectInputStream in) throws IOException;
  -> SERIALIZACIÓN PROGRAMADA, el componente que implementa la interfaz Externalizable y sus métodos para guardar el componente con un formato específico.
     Características:
      -> Precisa de la implementación de readExternal() y writeExternal().
      -> Las clases Externalizable también deben tener un constructor si argumentos.


OTRAS TECNOLOGÍAS PARA LA CREACIÓN DE COMPONENTES VISUALES
  JAVABEANS DE ORACLE
  MODELO DE OBJETO COMPONENTES DE MICROSOFT
  COBRA, estandar definido po el Object Management Group (OMG)

EMPAQUETADO DE COMPONENTES
Una vez creado, es necesario empaquetar el compoente para distribuirlo y utilizarlo después.
Se necesita el paquete jar que contiene las clases que forman el componente:
  - El propio componente.
  - Objetos BeanInfo.
  - Objetos Customizer
  - Clases de utilidad o recursos que requiera el componentes, etc.

Se pueden incluir varios componentes en el mismo archivo.

El jar debe incluir un fichero de manifiesto (.mf) que describa su contenido.

En el FICHERO DE MANIFIESTO la clase del componente va acompañada de Java-Bean: True, indicando que es un JavaBean.


ELABORACIÓN DE UN COMPONENTE
Pasos:
  1. Creación del compomente.
  2. Adición de propiedades.
  3. Implementación de su comportamiento.
  4. Gestión de los eventos
  5. Uso de componentes ya creados en NetBeans.

USO DE LOS COMPONENTES PREVIAMENTE CREADOS EN NetBeans
Una vez construido, incorporar el componente a la paleta, se puede hacer de diferentes formas:
  -> Clean and Build para generar el .jar, luego Herramientas>>Añadir a la Paleta.
  -> Si de otro hay q disponer de la distribución en un .jar e incorporarlo a la paleta desde el Administrador de la paleta.






















