COMUNICACIONES EN RED
  -> TCP/IP(Transmission Control Protocol/Internet Protocol), conjunto de protocolos que permiten la comunicación entre dispositivos en redes interconectadas.

Capas el módelo TCP/IP:
  1. LA CAPA HOST-RED
Permite comunicar el ordenador con el medio que conecta el equipo a la red.
Primero debe permitir convertir la información en impulsos físicos y ademas, permitir las conexiones entre los ordenadores de la red.
En esta capa se realiza un direccionamiento físico utilizando las direcciones MAC.

  2. LA CAPA DE RED
Es el eje de la arquitectura ya que permite que los equipos envíen paquetes en cualquier red y viajen de forma independiente a su destino.
Esta Capa define un formato de paquete y protocolo oficila llamado IP(Internet Protocol).
El trabajo de la red es entregar paquetes IP a su destino.
Realiza el direccionamiento lógico o direccionamiento por IP, ya que la capa es la encargada de enviar un determinado mensaje a su dirección IP de destino.

  3. LA CAPA DE TRANSPORTE
Permite que los equipos lleven a cabo una conversación.
Aquí se definieron dos protocolos de transporte: 
  - TCP(Transmission Control Protocl), es un protocolo orientado a conexión y fiable.
  - UDP(User Datagram Protocol), es un protocolo no orientado a conexión y no fiable.
Además, en esta capa se realiza el direccionamiento de los puertos, es encargada de que la informaci´´on se envíe a la aplicación adecuada(mediante un determinado puerto).

  4. LA CAPA DE APLICACIÓN
Engloba las funcionalidades de las capas de sesión, presentación y aplicación del modelo OSI.
Incluye todos los protocolos de alto nivel relacionados con las apps que se utilizan en Internet.

* PROTOCOLO, conjunto de reglas y estándares que determinan cómo se debe realizar la comunicación entre devices en una red. *
* MAC, Media Access Control, identificador único asignado a la tarjeta red del dispositivo, 42 bits(12 dígitos hexadecimales) y se utiliza para identificar exclusivamente a un dispositov en una red local (LAN). *
* OSI, Open Systems Interconnection, es un marco conceptual que describe cómo se comunica los sistemas en una red. Divide el proceso de comunicación en 7 capas, cada una con funciones específicas, para estandarizar y facilitar la interacción entre dispositivos y tecnologías. *

CONEXIONES TCP/UDP
  -> TCP - Transmission Control Protocol, protocolo orientado a la conexión que permite que un flujo de bytes originado en una máquina se entregue sin errores en cualquier máquina destino.
    Fragmenta el flujo entrante de bytes en menajes y pasa cada uno a la capa de red.
    En el diseño, el proceso TCP receptor reensambla los mensajes recibidos para formar el flujo de salida.
    Se encarga tambien del control de flujo para asegurar que un emisor rápido no pueda saturar a un receptor lento con más mensajes de los que pueda gestionar.
  -> UDP - User Datagram Protocol, protoclo sin conexión, para aplicaciones que no necesitan la asignación de secuencia ni el control de flujo TCP y que desean utilizar los suyos própios.
    También se utiliz para las consultas de petición y respuesta de tipo cliente-servidor, y en apps en las que la velocidad es más importante que la entrega precisa.

* A la hora de programar una app se debe elegir el protocolo que se quiere utilizar según las necesidades (El TCP o UDP). *


PUERTOS DE COMUNICACIÓN
El método empleado para comunicar una app con otra es el de definir direcciones de transporte en las que los procesos pueden estar a la escucha de solicitudes de conexión, estos puntos terminales son los PUERTOS.

Ciertos puertos se asignan por convenio, a ciertas aplicaciones particulares o servicios de carácter universal, la IANA(Internet Assigned Numbers Authority) determina las asignaciones a todos estos puertos.
Existen 3 rangos de puertos establecidos:
  -> PUERTOS CONOCIDOS [0, 1023], puertos reservados a aplicaciones de uso standar:
      - 21 FTP (File Transfer Protocol).
      - 22 SSH (Secure SHell).
      - 53 DNS (Domain Name System).
      - 80 HTTP (HyperText Transfer Protocol).
  -> PUERTOS REGISTRADOS [1024, 49151], son asignados por IANA para un servicio específico o aplicaciones, estos pueden ser utilizados por los usuários libremente.
  -> PUERTOS DINÁMICOS [49152, 65535], este rango no puede ser registrado y su uso se establece para conexiones temporales entre aplicaciones.

* PUERTO, punto de acceso en un dispositivo red que permite el intercambio de datos entre sistems, cada puerto está asociado con un número y se utiliza para identificar servicios especificos en la comunicación de red. *
* Al desarrollar una app que utilice un puerto de comunicación, se opta por utilizar puertos comprendidos en el rango [1024, 4951]


NOMBRES EN INTERNET
Los equipos informáticos se comunican entre sí mediante una dirección IP.
El sistema de resolucion de nombre DNS(Domain Name System) basado en dominis, en el que se dispone uno o más servidores encargados de resolver los nombres de los equipos pertenecientes a su ámbito,
consiguiendo la centralización necesaria para la correcta sincronización de los equipos, un sistema jerárquico que permite una administracion focalizada y
un mecanismo de resolucion eficiente.

A la hora de comunicarse con un equipo, se puede hacer directamente a través de su directorio IP o se puede poner su entrada DNS, 
en este último caso el equipo resuelve automáticamente su dirección IP a través del servidor de nombres que utilice en su conexión a Internet.


MODELOS DE COMUNICACIONES
  - El modelo cliente/servidor esta compuesto por un servidor que ofrece servicios y unos clientes que acceden a dichos servicios a través de la red.
  - Otro modelo son los Sistemas de Información Distribuidos, están comuestos por un conjunto de equipos que interactúan entre sí(actuando como servidores y clientes al mismo tiempo) para compartir información, recursos, ...


SOCKETS TCP
UN SOCKET es un punto de información por el cual un proceso puede recibir o enviar información.
Los sockets permiten la comunicación entre procesos de diferentes equipos en red.

A la hora de crear un socket hay que tener claro que tipo de socket se quiere crear (TCO o UDP)
  Al utilizar sockets TCP, el servidor utiliza un puerto por el que recibe las diferentes peticiones de los clientes, normalmente, el puerto del servidor es uno bajo [1-1023].

Cuando el cliente realiza la conexión con el server, se crea un nuevo socket encargado de permitir el envio y recepción de datos entre el cliente/servidor.
El puerto se crea de forma dinámica y se encuentra en el rango 4915 y 655335, de esta forma,, el puerto por donde se reciben las conexiones de los clientes queda libre y cada comuncación tiene su propio socket.

Paquete java.net
    - Clase Socket, permite la comunicación por red, permite a un cliente conectarse a un servidro para enviar y recibir información.
    - Clase ServerSocket, permite a un servidor escuchar y recibir las peticiones de los clientes por la red.


SERVIDOR
Los pasos que realiza para realizar una comunicación:
    -> PUBLICOAR PUERTO, se utiliza el comando ServerSocket iniciando el puerto donde se van a recibir las conexiones.
    -> ESPERAR PETICIÓN, el server queda a la espera de que se conecte un cliente, una vez conectado uno se crea el socket del cliente por donde se envían y reciben los datos.
    -> ENVIO Y RECEPCION DE DATOS, es necesario crear un flujo(stream) de entrada y otro de salida. Cuando el server recibe una petición, la procesa y le envía el result al client.
    -> CIERRE DEL SOCKET DEL CLIENTE una vez se finaliza la comunicación.

Para publicar el puerto del servidor se utiliza la función ServerSocket a la que hay que indicarle el puerto a utlizar:
      ServerSocket skServidor = new ServerSocket(Puerto);
Una vez publicado, el servidor utiliza la función acept() para esperar la conexión de un cliente.
Cuando se conecta se crea un nuevo socket por donde se van a realizar todas las comunaciones con el cliente y servidor.
      Socket sCliente = skServidor.accept();
Una vez recibida la petición del cliente, el servidor se comunia con él a través de streams de datos.
Finalmente, una vez terminada la comunicación se cierra el socket:
        sCliente.close();


CLIENTE
Los pasos que realiza para realizar una comunicación:
    -> CONECTARSE CON EL SERVIDOR, utiliza la función Socket para indicarse con un determinado servidor a un puerto específico. Una vez realizada la conexión se crea el socket por donde se realizará la comunicación.
    -> ENVIO Y RECEPCIÓN DE DATOS, para poder recibir/enviar datos es necesario crear un stream(flujo) de entrada y otro de salida.
    -> SE CIERRA EL SOCKET una vez finalizada la comunicación.

Para conectarse a un servidor se utiliza la función Socket indicando el equipo y el puerto al que desea conectarse:
      Socket sCliente = new Socket (Host, Puerto);
          - Host, string que guarda el nombre o dirección IP del servidor.
          - Puerto, una variable tipo int que guarda el puerto.
Establecida la comunicación, se crean los streams de entrada y salida para realizar las diferentes comunicaciones entre el cliente y el servidor.
Finalmente, terminada la comunicación se cierra el socket:
      sCliente.close();


FLUJO DE ENTRADA Y SALIDA
Una vez establecida la conexión cliente/servidor se inicializa la variable del tipo Socket.
Para poder enviar/recibir datoss a través del socket es necesario establecer un stream(flujo) de entrada o salida según corresponda.

Para establecer un stream de salida:
      OputputStream aux = sCliente.getOutputStream();
      DataOutputStream flujo_salida = new DataOutputStream (aux);
o lo que es lo mismo:
      DataOutputStream flujo_salida = new DataOutputStream(sCliente.getOutputStream());
A partrir de éste momento puede enviar información de la siguiente forma:
      flujo_salida.writeUTF("Enviar datos");

De forma análoga, se puede establecer el stream de entrada de la siguiente forma:
      InputStream aux = sCliente.getInputStream();
      DataInputStream flujo_entrada = new DataInputStream(aux);
o lo que es lo mismo:
      DataInputStream flujo_entrada = new DataInputStream(sClientte.getInputStream(aux));
Una forma cómoda de recibir información:
      String datos = new String();
      Datos = flujo_entrada.readUTF();


SOCKETS UDP
En el caso de utilizar sockets UDP no se crea una conexión y básicamente permite enviar y recibir mensajes a través de una dirección IP y un puerto.
Los mensajes se gestionan de forma individual y no se garantiza la recepción o envío como si ocurre en TCP.

  - DatagramSocket, clase java para utilizar sockets UDP.
  - DatagramPacket, para recibir o enviar mensajes.
Cuando se recibe/envía un paquete se hace con la siguiente informacion -> mensjae, longitud del mensaje, equipo y puesto.


RECEPTOR
En caso de querer iniciar el socket en un determinado puesto:
      DatagramSocket sSocket = new DatagramSocket(puerto);
Una vez iniciado el socket ya se pueden recibir mensajes utilizando la clase DiagramPacket, cuando recibe/envia un paquete se hace con la siguiente información (menasje, logitud del mensaje, equipo y puerto).
      byte [] cadena = new byte[1000];
      DatagramPacket mensaje = new DatagramPacket(cadena, cadena.lenght);
      sSocket.receive(mensaje);
Una vez recibido el mensaje se puede mostrar su contenido de la siguiente forma:
      String datos=new String(mensaje.getData(),0,mensaje.getLenght());
      System.out.println("\tMensaje Recibido; " + datos);
Finalmente, una vez finalizado el programa cerramos el socket:
      sSocket.close();


EMISOR







