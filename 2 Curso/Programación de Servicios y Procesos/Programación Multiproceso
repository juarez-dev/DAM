INTRO: APLICACIONES, EJECUTABLES Y PROCESOS

- PROGRAMA, conjunto de instrucciónes que ejecutadas en un ordenador realizarán una tarea o ayudarán al user a realizarla.
- APLICACIÓN, tipo de programa informático, diseñado como herramienta para resolver de manera automática un problema específdico del usuario.
- EJECUTABLE, fichero que contiene el código binario o interpretado que será ejecutado.
- PROCESO, un programa en ejecución.


EJECUTABLES

Según el tipo de código que contenga, los podemos clasificar en:
  -> BINARIOS, formados por un conjunto de instrucciones que directamente son ejecutadas por el procesador.
     Se optiene al compilar el código fuente de un programa y se guarda en un fichero ejecutable.
  -> INTERPRETADOS, código que suele tratarse como ejecutable, pero no es binário, sino otro tipo.
     Esta formado por códigos de operación que tomará el intérprete, que será el encargado de traducirlos al lenguaje máquina que ejecutará el procesador.
  -> SCIPTS, tipo especial de ejecutables interpretados, contienen las instrucciones que serán ejecutadas una detrás de otra por el intérprete.
     No son compilados, se puede abrir y ver el código que contienen en un editor de texto plano. Los interpretes de estos se suelen llamar MOTORES.
  -> LIBRERIAS, conjunto de funciones que permiten dar modularidad y reusabilidad a ptrogramas, su contenido es código ejecutable, aunque este sea ejecutado por todos lo ptrograma sque invoquen las funciones que contienen.


GESTION DE PROCESOS

Tipos de procesos ejecutados en el sistema:
  -> POR LOTES, formados por una serie de tareas. El user sólo introduce las tareas y los datos iniciales, deja que se realice el proceso y recoge los resultados.
  -> INTERACTIVOS, aquellas tareas en las que el proceso interactúa contiunuamente con el user y actúa de acuerdo a las acciones que éste realiza, o a los datos que suministra. 
  -> TIEMPO REAL, tareas en las que es crítico el tiempo de respuesta del sistema.

ESTADOS DE UN PROCESO
Los estados en el ciclo de vida de un proceso:
  1. NUEVO, proceso nuevo, creado.
  2. LISTO, que está esperando la CPU para ejecutar sus instrucciones.
  3. EN EJECUCIÓN, que actualmente, está en turno de ejecución en la CPU.
  4. BLOQUEADO, que está a la espera de que finalice una E/S.
  5. SUSPENDIDO, que se ha llevado a la memoria virtual para liberar RAM del sistema.
  6. TERMINADO, que ha finalizado y ya no necesitará más la CPU.

Todo proceso en ejecución, tiene que estar cargado en la RAM física del equipo, así como todos los datos que necesite.


PLANIFICACIÓN DE PROCESOS POR EL SISTEMA OPERATIVO

El CARGADOR es el encargado de crear los procesos, relaiza las siguientes tareas cuando se inicia un proceso:
  1. CARGA EL PROCESO EN LA MEMORIA PRINCIPAL, reserva un espacio en la RAM para el proceso, ahí se copian las instrucciones del fichero ejecutable de la aplicación, las constantes y, 
deja un espacio para los datos y la pila.
     Un proceso sudrante su ejecución no podrá hacer referencia a direcciones que se encuentren fuera de su espacio de memoria.
  2. CREA UNA ESTRUCTURA DE INFORMACIÓN (PCB - Process Control Block), la info es única para cada proceso y permite controlarlo. Entre otros el PCB estara formado por los siguientes datos:
      - PID (PROCESS IDENTIFICATOR), número único para cada proceso.
      - ESTADO ACTUAL DEL PROCESO, en ejecución, listo, bloqueado, suspendido ó finalizado.
      - ESPACIO DE DIRECCIONES DE MEMORIA donde comienza la zona de memoria reservada al proceso y su tamaño
      - INFORMACIÓN PARA LA PLANIFICACIÓN, prioridad, quamtum, estadísticas, ...
      - INFORMACIÓN PARA EL CAMBIO DE CONTEXTO, valor de los registros de la CPU. Esta info es necesaria para poder cambiar de la ejecución de un proceso a otro.
      - RECURSOS UTILIZADOS, Ficheros abiertos, conexiones, ...

El PLANIFICADOR es el encargado de tomar las decisiones relacionadas con la ejecución de los procesos, se encarga de decidir qué proceso se ejecuta y cuanto tiempo se ejecuta.
Es otro proceso, parte del SO.
ALGORITMO DE PLANIFICACION, es la política en la toma de decisiones del planificador, los más importantes son:
  -> ROUND-ROBIN, favorece la ejecución de procesos interactivos.
     Cada proceso puede ejecutar sus instrucciones en la CPU durante un quamtum, si no le ha dado tiempo a finalizar, se coloca al final de la cola de procesos listos, y espera a que vuelva su turno de procesamiento.
  -> POR PRIORIDAD, se asignan prioridades a los distintos procesos y su ejecución se hace de acuerdo a la prioridad.
  -> MÚLTIPLES COLAS, combinación de los anteriores. 
     Todos los procesos de una misma prioridad, estarán en la misma cola, cada cola será gestionada con el algoritmo Round-Robin.

En la PLANIFICACION o SCHEDULING se busca conciliar los siguientes objetivos:
  - EQUIDAD, todos los procesos deben ejecutarse.
  - EFICACIA, mantener ocupada la CPU un 100% del tiempo.
  - TIEMPO DE RESPUESTA, Minimizar el tiempo de respuesta al usuario.
  - TIEMPO DE REGRESO, Minimizar el tiempo de espera de los users de procesos por lotes para obtener resultados.
  - RENDIMIENTO. Maximizar el número de tareas procesadas por hora.


CAMBIO DE CONTEXTO EN LA CPU

Un proceso es una unidad de trabajo completa.

Estado de la CPU es el congunto de registros(pequeños espacios de memoria) en los que se almacenan temporalmente la información que, en cada instante, necesita la instruccion que esté procesando la CPU.

Registros que destamamos:
  -> REGISTRO CONTADOR DE PROGRAMA, en cada instante almacena la dirección de la siguiente instrucción a ejecutar.
El contador de programa, apunta a la dirección de la siguiente instrucción que habrá que traer a la memoria, cuando se termine de procesar la instruccion en curso.
Este contador de programa nos permitirá continuar en cada proceso por la instrucción de dónde lo hubiéramos dejado todo.
  -> EL PUNTERO A LA PILA, en cada instante apunta a la parte superior de la pila del proceso de ejecución, que es donde será almacenado el contexto de la CPU, 
y de donde se recuperará cuando ese proceso vuelva a ejecutarse.

La CPU realiza un CAMBIO DE CONTEXTO cada vez que cambia la ejecución de un proceso a otro distinto.
En un cambio de contexto, hay que guardar el estado actual de la CPU y restaurar su estado del proceso que va a pasar a ejecutar.


SERVICIOS. HILOS

THREAD o HILO, son parte de la misma aplicación, cada uno actúa siguiendo un patrón de comportamiento.
El comportamiento es el algoritmo que cada uno de ellos seguirá.
Los hilos de un mismo proceso comparten la información de las variables del proceso.

Realizar cambios de contexto entre hilos de un mismo proceso, es más rápido y menos costoso que el cambio de contexto entre procesos, ya que solo hay que cambiar el valor del registro contador 
de programa de la CPU y no todos los valores de los registros de la CPU.

- Un proceso, estará formado por, al menos, un hilo de ejecución.
- Un proceso es una unidad pesada de ejecución. Si el proceso tiene varios hilos, cada hilo, es la unidad de ejecución ligera.

UN SERVICIO es un proceso que, normalmente, es cargado durante el arranque del sistema operativo. Es un proceso que queda a la espera de que otro le pida que realize una tarea.


CREACIÓN DE PROCESOS

Las clases que necesitamos para crear procesos son:
  -> java.lang.Process, proporciona los objetos Proceso, por lo que podremos controlar los procesos creados desde nuestro código.
  -> java.lang.Runtime, permite lanzar la ejecución de un programa en el sistema.
      * Método excec() -> Runtime.excec(String comando); -> devuelve el objeto Process que representa al proceso en ejecución que está realizando la tarea comando.


COMANDOS PARA LA GESTIÓN DE PROCESOS

  1. Windows:
    * tasklist -> lista de procesos presentes en el sistemma.
    * taskkill -> mata procesos, con la opcion /PID se especifica el identificador del proceso a matar.
  2. GNU/Linux:
    * ps, lista los procesos presentes en el sistemas. La opcion aux muestra todos los procesos independientemente del user que los haya lanzando.
    * pstree, mustra un listado de procesos en forma de árbol. La opcion AGu construirá el árbol utilizando líneas guía y mostrará el nombre de user propietario del proceso.
    * kill, manda señales a los procesos, -9 matará el proceso.
    * killall, Mata procesos por nombre.
    * nice, cambia la prioridad de un proceso. Las prioridades están entre -20 y -19.


HERRAMIENTAS GRÁFICAS PARA LA GESTIÓN DE PROCESOS

Administrador de Tareas en Windows y Monitor del Sistema en GNU/Linux, nos ofrecen, al menos, las siguientes funcionalidades e información:
  -> Listado procesos activos, su PID, usuario y ubicación de su fichero ejecutable.
  -> Posibilidad de finalizar procesos.
  -> Información sobre el uso de CPU, memoria principal y virtual, red, ...
  -> Posibilidad de cambiar la prioridad de ejecución de los procesos.


PROGRAMACIÓN CONCURRENTE

CONCURRENCIA, la coincidencia de varios sucesos al mismo tiempo.
Dos procesos son CONCURRENTES, cuando la primera instrucción de uno de los procesos se ejecuta después de la primera y antes que la última del otro proceso.
La planificación alternando los instantes de ejecución en la gestión de los procesos, hace que los procesos se ejecuten de forma concurrente, o lo que es lo mismo MULTIPROCESO.

LA PROGRAMACIÓN CONCURRENTE proporciona mecanismos de comunicación y sincronización entre procesos que se ejecutan de forma simultanea en un sistema informático.
Nos permitirá definir qué instrucciones se ejecutan de forma simultánea con las de otros procesos, sin producir errores y cuales deben ser sincronizadas con las de otros procesos para que los resutados sean correctos.

Principales razones por las que se utiliza una estructura concurrente:
  -> OPTIMIZAR LA UTILIZACIÓN DE LOS RECURSOS.
  -> PROPORCIONAR INTERACTIVIDAD A LOS USUARIOS Y ANIMACIÓN GRÁFICA.
  -> MEJORAR LA DISPONIBILIDAD.
  -> CONSEGUIR EL DISEÑO CONCEPTUALMENTE MÁS COMPRENSIBLE Y MANTENIBLE.
  -> AUMENTAR LA PROTECCIOÓN.

Nuevos entornos hardware:
  -> Micropocesadores con múltiples núcleos que comparten la memoria principal del sistema.
  -> Entornos multiprocesador con memoria compartida.
  -> Entornos distribuidos. Conectados por red y/o internet.

Beneficios al adoptar un modelo de programa concurrente:
  -> Aporta gran claridas sobre lo que cada proceso debe hacer y cuando hacerlo.
  -> Puede conducir a una reducción del tiempo de ejecución.
  -> Permite mayor flexibilidad de planificación.
  -> Permite mejor modelado previo del comportamiento del programa, y en consecuencia un análisis más fiable de las diferentes opciones que requiera su diseño.

Tipos básicos de interacción entre procesos concurrentes:
  -> INDEPENDIENTES, sólo interfieren en el uso de la CPU.
  -> COOPERANTES, un proceso genera la información o proporciona un servicio que otro necesita.
  -> COMPETIDORES, procesos que necesitan usar los mismos recursos de forma exlusiva.

CONDICIÓN DE COMPETENCIA, cuando ambos procesos necesitan el mismo recurso, ya sea exclusivamente o no, por lo que hay que utilizar mecanismos de sincronización y comunicación entre ellos.

* REGIÓN DE EXCLUSION MUTUA O REGIÓN CRÍTICA, conjunto de instrucciones en las que el proceso utiliza un recurso y que se deben ejecutar de forma exclusiva con respecto a otros procesos competidores por ese mismo recuro.
* Un proceso hace un LOCK sobre un recurso cuando ha obtenido su uso en exclusión mútua.
* DEADLOCK o INTERBLOQUEO, cuando los procesos no pueden obtener, nunca, los recursos necesarios para contiunar su tarea, es una situación peligrosa que puede llevar al sistema a su caída o cuelgue.


COMUNICACIÓN ENTRE PROCESOS
Un proceso da o deja información; recibe o recoge información.

PRIMITIVAS, un tipo de dato del cual conocemos sus restricciones y efectos, pero no su implementación exacta.
Usar primitivas se traduce en utilizar objetos y sus métodos, teniendo en cuenta sus repercusiones reales en el comportamiento de nuestros procesos.

Los lenguajes de programación y los sistemas operativos, nos proporcionana primitivas de sincronización que facilitan la interacción entre procesos de forma sencilla y eficiente.

Clasificaremos las interacciones entre procesos y el resto del sistema, como estas 3:
  -> SINCRONIZACIÓN, un proceso puede conocer el punto de ejecución en el que se encuentra otro en ese determinado instante.
  -> EXCLUSIÓN MUTUA, mientras un proceso accede a un recurso, ningún otro accede al mismo recurso o variable compartida.
  -> SINCRONIZACIÓN CONDICIONAL, sólo se accede a un recurso cuando se encuentra en un determinado estado interno.


MECANISMOS BÁSICOS DE COMUNICACIÓN

2 formas en las que un proceso puede comunicarse con otro:
  -> INTERCAMBIO DE MENSAJES, tenemos las primitivas de send y recibe o wait information.
  -> RECURSOS (o MEMORIA) COMPARTIDOS, las primitivas seran write y read data en o de resource. Son bloqueantes, un proceso quedará bloqueado hasta que los datos estén listos para poder ser leidos.

En caso de comunicar procesos dentro de una misma máquina, el intercambio de mensajes, se puede realizar de 2 formas:
  -> Utilizar un BUFFER DE MEMORIA.
  -> Utilizar un SOCKET.

TIPOS DE COMUNICACIÓN

ELEMENTOS:
  -> MENSAJE, inoformación que es el objeto de la comunicación.
  -> EMISOR, entidad que emite, genera o es el origen del mensaje.
  -> RECEPTOR, entidad que recibe, recoge o es destinataria del mensaje.
  -> CANAL, medio por el que viaja o es enviado y recibido el mensaje.

Clasificación del canal según su capacidad y los sentidos en los que puede viajar la información:
  -> SIMPLEX, comunicación en un sentido, el emisor es origen y el receptor escucha el mensaje al final del canal.
  -> FULL DUPLEX, comunicación en ambos sentidos simultáneamiente entre emisor y receptor, el emisor es tambíen receptor y viceversa.
  -> HALF DUPLEX, el mensaje puede viajar en abmos sentidos, pero no al mismo tiempo.

Clasificación dependiento de la sincronía que mantengan el emisor y receptor durante la comunicación:
  -> SÍNCRONA, el emisor queda bloqueado hasta que el receptor recibe el mensaje, ambos se sincronizan en el momento de la recepción del mensaje.
  -> ASÍNCRONA, el emisor continua con su ejecución inmediatamente después de emitir el mensaje, sin quedar bloqueado.
  -> INVOCACÍON REMOTA, el proceso emisor queda suspendido hasta que recibe la confirmación de que el receptor recibió correctamente el mensaje, 
despues el emisor y receptor ejecutarán síncronamente un segmento de código común.

Clasificación dependiento del comportamiento de los interlocutores que intervienen en la comunicación:
  -> SIMÉTRICA, todos los procesos pueden enviar y recibir información.
  -> ASIMÉTRICA, sólo un proceso actúa de emisor, el resto sólo escucháran el o los mensajes.


SINCRONIZACIÓN ENTRE PROCESOS

Problema de los procesos lectores-escritores (queremos acceder a lectura, escritura o a lectura/escritura), el SO nos ayuda a resolver estos problesmas, ya que:
  -> Si el acceso es sólo lectura, permite que todos los procesos lectores, puedan acceder simultáneamente a él.
  -> En caso de escritura y lectura/escritura, nos permite pedir un tipo de dacceso de forma esclusiva al fichero y otros los otros procesos esperarán a que haya terminado.

REGIONES CRÍTICAS
Conjunto de instrucciones en las que un proceso accede a un recurso compartido, las instrucciones que forman esa región o sección, se encuentran de forma indivisible o atómica
y de forma exclusiva con respecto a otros procesos que accedan al mismo recurso compartido al que se está accediendo.

Al identificar y definir regiones críticas en el código, se tendra en cuenta:
  -> Se protegerán con secciones críticas sólo aquellas instrucciones que acceden a un recurso compartido.
  -> Las instrucciones que forman una sección crítica, serán las mínimas.
  -> Se pueden difinir tantas secciones como sean necesarias.
  -> Un único proceso entra en su sección crítica, el resto esperan a que salga de su sección crítica.
  -> Al final de cada sección crítica, el recurso debe ser liberado para que puedan utilizarlo otros procesos.

Cualquier actualización de datos en un recurso compartido, necesitará establecer una región crítica que implicará como mínimo estas instrucciones:
  -> Leer el dato que se quiere actualizar, pasarlo a la zona de memoria local al proceso.
  -> Realizar el cálculo de actualización, modificar el dato en memoria.
  -> Escribir el dato actualizado, llevar el dato modificado de memoria al recurso compartido.

CATEGORÍA DE PROCESO CLIENTE-SUMINISTRADOR

  * CLIENTE, es un proceso que requiere o solicita infromación o servicios que proporciona otro proceso.
  * SUMINISTRADOR/SERVIDOR, suministra información o servicios, a traves de memoria compartida, fichero, red o cualquier otro recurso.
  * INFORMACIÓN O SERVICIO ES PERECEDERO, la info desaparece cuando es consumida por el cliente y el servicio es prestado en el momento en el que el cliente y suministrador están sincronizados.






















