PROGRAMACIÓN MULTIHILO
Es un enfoque de la concurrencia.
Los programas realizan actividades o tareas, y para ello pueden seguir uno o más flujos de ejecución, demendiendo de su número, podemos hablar de 2 tipos de programas:
  -> PROGRAMA DE FLUJO ÚNICO, el que realiza las actvidades/tareas una a continuación de la otra, de manera secuencial, cada una de ellas debe concluir por completo antes de iniciar la siguiente.
  -> PROGRAMA DE FLUJO MÚLTIPLE, aquel que coloca las actividades a realizar en diferentes flujos de ejecución, cada uno de ellos se inicia y termina por separado, pudiéndose ejecutar de manera simultánea o concurrente.

La PROGRAMACIÓN MULTIHILO o MULTITHREADING consiste en desarrollar programas de flujo múltiple, cada flujo de ejecucion es un TRHEAD o HILO.


CONCEPTOS SOBRE HILOS
  THREAD o SUBPROCESO, flujo de control secuencial independiente dentro de un proceso y está asociado a una secuencia de instrucciones, un conjunto de registros y una pila.
  PRIMARY THREAD, el primer hilo creado, cuando se ejecuta el SO, el cual puede a su vez crear hilos adicionales.

Observaciones:
  - Un thread no puede existir independientemente de un proceso.
  - Un thread no puede ejecutarse por si solo.
  - Dentro de cada proceso puede haber varios thread ejecutándose.


RECURSOS COMPARTIDOS POR LOS THREADS

Un thread lleva asociado los siguientes elementos:
  - Un id único.
  - Un contador de programa propio.
  - Un congunto de registros.
  - Una stack.

Un thread puede compartir con otros del mismo proceso los siguiente resources:
  - Code.
  - Data (Global variables).
  - Other SO resources (open files, signals, ...).

Se hace necesario utiilizar esquemas de bloqueo y sincronicación por el hecho de que los hilos comparten recursos.


VENTAJAS SOBRE LOS PROCESOS
  -> Consumen menos recursos en el lanzamiento y ejecución.
  -> Tardan menos tiempo en crear y terminar.
  -> La conmutación entre hilos del mismo proceso o cambio de contexto es bastante más rápida.

USO DE LOS HILOS
Se aconseja el uso de los hilos cuando:
  -> La app maneja entradas de varios dispositivos de comunicación.
  -> La app debe poder realizar diferentes tareas a la vez.
  -> Interesa diferenciar tareas con una prioridad variada.
  -> La aplicación se va a ejecutar en un entorno multiprocesador.
Los threads son idóneos para programar aplicaciones de entornos interactivos y en red, asi como simuladores y animaciones.


MULTITHREADING ON JAVA
Java da soporte al concepto Thread desde el propio lenguaje, con algunas clases e interfaces definidas en java.lang y con métodos especificos para la manipulación de threads en la clase Object.
A partir de la versión 5, se incluye el paquete java.util.concurrent con nuevas utilidades para desarrollar apps multithread y aplicaciones con alto nivel de concurrencia.

En el paquete java.lang tenemos las siguientes utilidades de concurrencia:
  -> Clase thread, responsable de producir threads funcionales para otras clases y proporciona gran parte de los métodos utilizados para su gestión.
  -> Interfaz Runnable, proporciona la capacidad de añadir la funcionalidad de hilo a una clase implementando la interfaz, en lugar de derivandola a la clase thread.
  -> Clase ThreadDeath, una clase de error, deriva de la clase Error y proporciona medios para manejar y notificar errores.
  -> Clase ThreadGroup, se utiliza para manejar un grupo de hilos de modo conjunto, de manera que se pueda controlar su ejecución de forma eficiente.
  -> Clase Object, no es estrictamente de apoyo a los hilos, pero proporciona métodos cruciales dentro de la arquitectura multihilo de Java -> wait(), notify(), notifyAll().

El Paquete java.util.concurrent incluye clases que facilitan el desarrollo de apps multihilo y apps complejas porque estan concebidas para utilizarse con bloques de diseño.
Estas utilidades están dentro de los siguientes Paquetes:
  -> java.util.concurrent:
    - Clases de sincronización -> Semaphore, CountDownLatch, CyclicBarrier y Exchanger.
    - Interfaces para separar la lógica de la ejecución -> Executor, ExecutorService, Callable y Future.
    - Interfaces para gestionar colas de hilos -> BlockingQueque, LinkedBlokingQueque, ArrayBlockingQueque, SynchronousQueque, PriorityBlockingQueque y DelayQueque.
  -> java.util.concurrent.atomic, incluye clases para ser usadas como variables atómicas en aplicaciones multithread y con diferentes data types -> AtomicInteger, AtomicLong.
  -> java.util.concurrent.locks, define clases como uso alternativo a la clausa sinchronized, se encuenran algunas interfaces como -> Lock, ReadWriteLock.


CREACIÓN DE THREADS
En java se representan mediante una instancia de la clase java.lang.thread, este objeto se emplea para inicar, detener o cancelar la ejecución de un thread.

Los thread se pueden implementar o definir de 2 formas:
  -> Extendiendo la clase thread.
  -> Mediante la interfaz Runnable.
En ambos, se debe proporcionar una definición del método run(), el cual contiene el código que ejecutará el hilo, es decir, su comportamiento.

-> Extender la clase thread es el procedimiento más sencillo, pero si la clase ya hereda alguna otra, no se puede heredar thread tambien, por lo que habrá que recurrir al procedimiento.
-> Implementar Runnable is always possible, es el procedimiento más general y el más flexible.

* Cuenado JVM arranca en la ejecución de un programa, hay un thread ejecutnadose (Main Thread) controlado por el método main(), que se ejecuta al inicio del programa y es el último que termina su ejecución.

EXTEDNS THREAD
  -> Se crea una new class que herede la clase thread.
  -> Se redefine el método run() con el código asociado al hilo, las secuencias que ejecutará.
  -> Se crea un objeto de la nueva clase thread, que será realmente el hilo.
Para iniciar el hilo una vez creado:
  -> Invocar el método start() del objeto thread creado.

IMPLEMENTS RUNNABLE
  -> Declarar new class implements Runnable.  
  -> Redefinir en la class el metódo run() con el código asociado al thread.
  -> Crear un objeto de la class.
  -> Crear un objeto de la class thread pasando como argumento al constructor el objeto cuya class tiene el método run(), que sera el thred.
Para iniciar el thread e iniciarlo:
  -> Invocar el método start() del objeto thread.


ESTADOS DE UN THREAD
El ciclo de vida de un thread comprende los diferentes estados en los que puede estar un thread desde que se crea hasta que finaliza:
  -> New, se ha creado pero aún no está disponible para su ejecución.
  -> Runnable, está preparado para ejecutarse.
Puede estar ejecutandose, siempre y cuando se le haya asignado un procesamiento, o que no este ejecutandose en beneficio de otro hilo, en cuyo caso esta Preparado.
  -> No runnable, podría estar ejecutándose, pero alguna actividad interna al propio thread se lo impide.
Si un thread esta en No Ejecutable no tiene oportunidad de que se le asigne tiempo de procesamiento.
  -> Terminated, ha finalizado, la fomra natural de terminated thread es finalizando su método run().

El metodo getState() de la class thread, permite obtener el estado en el que se encuentra el thread, devuelve:
  - RUNNABLE.
  - NO RUNNABLE.
  - TERMINATED.


INICIAR UN HILO






