PROGRAMACIÓN MULTIHILO
Es un enfoque de la concurrencia.
Los programas realizan actividades o tareas, y para ello pueden seguir uno o más flujos de ejecución, demendiendo de su número, podemos hablar de 2 tipos de programas:
  -> PROGRAMA DE FLUJO ÚNICO, el que realiza las actvidades/tareas una a continuación de la otra, de manera secuencial, cada una de ellas debe concluir por completo antes de iniciar la siguiente.
  -> PROGRAMA DE FLUJO MÚLTIPLE, aquel que coloca las actividades a realizar en diferentes flujos de ejecución, cada uno de ellos se inicia y termina por separado, pudiéndose ejecutar de manera simultánea o concurrente.

La PROGRAMACIÓN MULTIHILO o MULTITHREADING consiste en desarrollar programas de flujo múltiple, cada flujo de ejecucion es un TRHEAD o HILO.


CONCEPTOS SOBRE HILOS
  THREAD o SUBPROCESO, flujo de control secuencial independiente dentro de un proceso y está asociado a una secuencia de instrucciones, un conjunto de registros y una pila.
  PRIMARY THREAD, el primer hilo creado, cuando se ejecuta el SO, el cual puede a su vez crear hilos adicionales.

Observaciones:
  - Un thread no puede existir independientemente de un proceso.
  - Un thread no puede ejecutarse por si solo.
  - Dentro de cada proceso puede haber varios thread ejecutándose.


RECURSOS COMPARTIDOS POR LOS THREADS

Un thread lleva asociado los siguientes elementos:
  - Un id único.
  - Un contador de programa propio.
  - Un congunto de registros.
  - Una stack.

Un thread puede compartir con otros del mismo proceso los siguiente resources:
  - Code.
  - Data (Global variables).
  - Other SO resources (open files, signals, ...).

Se hace necesario utiilizar esquemas de bloqueo y sincronicación por el hecho de que los hilos comparten recursos.


VENTAJAS SOBRE LOS PROCESOS
  -> Consumen menos recursos en el lanzamiento y ejecución.
  -> Tardan menos tiempo en crear y terminar.
  -> La conmutación entre hilos del mismo proceso o cambio de contexto es bastante más rápida.

USO DE LOS HILOS
Se aconseja el uso de los hilos cuando:
  -> La app maneja entradas de varios dispositivos de comunicación.
  -> La app debe poder realizar diferentes tareas a la vez.
  -> Interesa diferenciar tareas con una prioridad variada.
  -> La aplicación se va a ejecutar en un entorno multiprocesador.
Los threads son idóneos para programar aplicaciones de entornos interactivos y en red, asi como simuladores y animaciones.


MULTITHREADING ON JAVA
Java da soporte al concepto Thread desde el propio lenguaje, con algunas clases e interfaces definidas en java.lang y con métodos especificos para la manipulación de threads en la clase Object.
A partir de la versión 5, se incluye el paquete java.util.concurrent con nuevas utilidades para desarrollar apps multithread y aplicaciones con alto nivel de concurrencia.

En el paquete java.lang tenemos las siguientes utilidades de concurrencia:
  -> Clase thread, responsable de producir threads funcionales para otras clases y proporciona gran parte de los métodos utilizados para su gestión.
  -> Interfaz Runnable, proporciona la capacidad de añadir la funcionalidad de hilo a una clase implementando la interfaz, en lugar de derivandola a la clase thread.
  -> Clase ThreadDeath, una clase de error, deriva de la clase Error y proporciona medios para manejar y notificar errores.
  -> Clase ThreadGroup, se utiliza para manejar un grupo de hilos de modo conjunto, de manera que se pueda controlar su ejecución de forma eficiente.
  -> Clase Object, no es estrictamente de apoyo a los hilos, pero proporciona métodos cruciales dentro de la arquitectura multihilo de Java -> wait(), notify(), notifyAll().

El Paquete java.util.concurrent incluye clases que facilitan el desarrollo de apps multihilo y apps complejas porque estan concebidas para utilizarse con bloques de diseño.
Estas utilidades están dentro de los siguientes Paquetes:
  -> java.util.concurrent:
    - Clases de sincronización -> Semaphore, CountDownLatch, CyclicBarrier y Exchanger.
    - Interfaces para separar la lógica de la ejecución -> Executor, ExecutorService, Callable y Future.
    - Interfaces para gestionar colas de hilos -> BlockingQueque, LinkedBlokingQueque, ArrayBlockingQueque, SynchronousQueque, PriorityBlockingQueque y DelayQueque.
  -> java.util.concurrent.atomic, 
  -> java.util.concurrent.locks, 












