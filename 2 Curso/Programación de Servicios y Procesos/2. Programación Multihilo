PROGRAMACIÓN MULTIHILO
Es un enfoque de la concurrencia.
Los programas realizan actividades o tareas, y para ello pueden seguir uno o más flujos de ejecución, demendiendo de su número, podemos hablar de 2 tipos de programas:
  -> PROGRAMA DE FLUJO ÚNICO, el que realiza las actvidades/tareas una a continuación de la otra, de manera secuencial, cada una de ellas debe concluir por completo antes de iniciar la siguiente.
  -> PROGRAMA DE FLUJO MÚLTIPLE, aquel que coloca las actividades a realizar en diferentes flujos de ejecución, cada uno de ellos se inicia y termina por separado, pudiéndose ejecutar de manera simultánea o concurrente.

La PROGRAMACIÓN MULTIHILO o MULTITHREADING consiste en desarrollar programas de flujo múltiple, cada flujo de ejecucion es un TRHEAD o HILO.


CONCEPTOS SOBRE HILOS
  THREAD o SUBPROCESO, flujo de control secuencial independiente dentro de un proceso y está asociado a una secuencia de instrucciones, un conjunto de registros y una pila.
  PRIMARY THREAD, el primer hilo creado, cuando se ejecuta el SO, el cual puede a su vez crear hilos adicionales.

Observaciones:
  - Un thread no puede existir independientemente de un proceso.
  - Un thread no puede ejecutarse por si solo.
  - Dentro de cada proceso puede haber varios thread ejecutándose.


RECURSOS COMPARTIDOS POR LOS THREADS

Un thread lleva asociado los siguientes elementos:
  - Un id único.
  - Un contador de programa propio.
  - Un congunto de registros.
  - Una stack.

Un thread puede compartir con otros del mismo proceso los siguiente resources:
  - Code.
  - Data (Global variables).
  - Other SO resources (open files, signals, ...).

Se hace necesario utiilizar esquemas de bloqueo y sincronicación por el hecho de que los hilos comparten recursos.


VENTAJAS SOBRE LOS PROCESOS
  -> Consumen menos recursos en el lanzamiento y ejecución.
  -> Tardan menos tiempo en crear y terminar.
  -> La conmutación entre hilos del mismo proceso o cambio de contexto es bastante más rápida.

USO DE LOS HILOS
Se aconseja el uso de los hilos cuando:
  -> La app maneja entradas de varios dispositivos de comunicación.
  -> La app debe poder realizar diferentes tareas a la vez.
  -> Interesa diferenciar tareas con una prioridad variada.
  -> La aplicación se va a ejecutar en un entorno multiprocesador.
Los threads son idóneos para programar aplicaciones de entornos interactivos y en red, asi como simuladores y animaciones.


MULTITHREADING ON JAVA
Java da soporte al concepto Thread desde el propio lenguaje, con algunas clases e interfaces definidas en java.lang y con métodos especificos para la manipulación de threads en la clase Object.
A partir de la versión 5, se incluye el paquete java.util.concurrent con nuevas utilidades para desarrollar apps multithread y aplicaciones con alto nivel de concurrencia.

En el paquete java.lang tenemos las siguientes utilidades de concurrencia:
  -> Clase thread, responsable de producir threads funcionales para otras clases y proporciona gran parte de los métodos utilizados para su gestión.
  -> Interfaz Runnable, proporciona la capacidad de añadir la funcionalidad de hilo a una clase implementando la interfaz, en lugar de derivandola a la clase thread.
  -> Clase ThreadDeath, una clase de error, deriva de la clase Error y proporciona medios para manejar y notificar errores.
  -> Clase ThreadGroup, se utiliza para manejar un grupo de hilos de modo conjunto, de manera que se pueda controlar su ejecución de forma eficiente.
  -> Clase Object, no es estrictamente de apoyo a los hilos, pero proporciona métodos cruciales dentro de la arquitectura multihilo de Java -> wait(), notify(), notifyAll().

El Paquete java.util.concurrent incluye clases que facilitan el desarrollo de apps multihilo y apps complejas porque estan concebidas para utilizarse con bloques de diseño.
Estas utilidades están dentro de los siguientes Paquetes:
  -> java.util.concurrent:
    - Clases de sincronización -> Semaphore, CountDownLatch, CyclicBarrier y Exchanger.
    - Interfaces para separar la lógica de la ejecución -> Executor, ExecutorService, Callable y Future.
    - Interfaces para gestionar colas de hilos -> BlockingQueque, LinkedBlokingQueque, ArrayBlockingQueque, SynchronousQueque, PriorityBlockingQueque y DelayQueque.
  -> java.util.concurrent.atomic, incluye clases para ser usadas como variables atómicas en aplicaciones multithread y con diferentes data types -> AtomicInteger, AtomicLong.
  -> java.util.concurrent.locks, define clases como uso alternativo a la clausa sinchronized, se encuenran algunas interfaces como -> Lock, ReadWriteLock.


CREACIÓN DE THREADS
En java se representan mediante una instancia de la clase java.lang.thread, este objeto se emplea para inicar, detener o cancelar la ejecución de un thread.

Los thread se pueden implementar o definir de 2 formas:
  -> Extendiendo la clase thread.
  -> Mediante la interfaz Runnable.
En ambos, se debe proporcionar una definición del método run(), el cual contiene el código que ejecutará el hilo, es decir, su comportamiento.

-> Extender la clase thread es el procedimiento más sencillo, pero si la clase ya hereda alguna otra, no se puede heredar thread tambien, por lo que habrá que recurrir al procedimiento.
-> Implementar Runnable is always possible, es el procedimiento más general y el más flexible.

* Cuenado JVM arranca en la ejecución de un programa, hay un thread ejecutnadose (Main Thread) controlado por el método main(), que se ejecuta al inicio del programa y es el último que termina su ejecución.

EXTEDNS THREAD
  -> Se crea una new class que herede la clase thread.
  -> Se redefine el método run() con el código asociado al hilo, las secuencias que ejecutará.
  -> Se crea un objeto de la nueva clase thread, que será realmente el hilo.
Para iniciar el hilo una vez creado:
  -> Invocar el método start() del objeto thread creado.

IMPLEMENTS RUNNABLE
  -> Declarar new class implements Runnable.  
  -> Redefinir en la class el metódo run() con el código asociado al thread.
  -> Crear un objeto de la class.
  -> Crear un objeto de la class thread pasando como argumento al constructor el objeto cuya class tiene el método run(), que sera el thred.
Para iniciar el thread e iniciarlo:
  -> Invocar el método start() del objeto thread.


ESTADOS DE UN THREAD
El ciclo de vida de un thread comprende los diferentes estados en los que puede estar un thread desde que se crea hasta que finaliza:
  -> New, se ha creado pero aún no está disponible para su ejecución.
  -> Runnable, está preparado para ejecutarse.
Puede estar ejecutandose, siempre y cuando se le haya asignado un procesamiento, o que no este ejecutandose en beneficio de otro hilo, en cuyo caso esta Preparado.
  -> No runnable, podría estar ejecutándose, pero alguna actividad interna al propio thread se lo impide.
Si un thread esta en No Ejecutable no tiene oportunidad de que se le asigne tiempo de procesamiento.
  -> Terminated, ha finalizado, la fomra natural de terminated thread es finalizando su método run().

El metodo getState() de la class thread, permite obtener el estado en el que se encuentra el thread, devuelve:
  - RUNNABLE.
  - NO RUNNABLE.
  - TERMINATED.


INICIAR UN HILO
Cuando se crea un thread mediante el método new(), no implica que se pueda ejecutar, para ello debe estar en estado Runnable y para esto es necesario iniciarlo mediante el método start() de la clase thread.

El método start() realiza las siguientes tasks:
  -> Crea los resources del sistem necesarios para ejecutar el thread.
  -> Se encarga de llamar a su método run() y lo ejecuta como un subroceso nuevo e independiente.

Consideraciones importantes:
  -> Se puede invocar directamente run() y se ejecutara el código asociado al método dentro del thread actual, pero no comenzará un nuevo hilo como subproceso independiente.
  -> Una vez llamado al metodo run() de un threadddddddddd, no se puede volver a realizar otra llamada al mismo método, si no, se obtendra una IllegalThreadStateException.
  -> El orden en que se inician los thread mediante start() no influye en el orden de ejecución de los mismos -> El orden de ejecución de los hilos es NO-DETERMINÍSTICO.


DETENER TEMPORALMENTE UN THREAD
Significa que ha pasado al estado no runnable.
Un thread pasara a no runnable cuando se de alguna de las siguientes circunstancias:
  -> El thread se ha dormido, se ha invocado sleep() de la clase thread, indicando el tiempo que permanecerá detenido, transcurrido se vuelve Runnable, en concreto a Preparado.
  -> El thread está esperando, detiene su ejecución mediante la llamada al método wait() y no se reanudará, pasará a Ejecutable cuando se produzca una llamada a notify() o notifyAll() por otro thread.
  -> El thread se ha bloqueado, está pendiente de que finalice una operación EE/S en algun dispositivo, o a la espera de algún otro topo de recurso, cunado finaliza el bloqueo vuelve a Ejecutable -> Preparado.

El método suspend() (en desuso) también permite detener temporalmente un thread y en este caso lo reanuda resume(), no son seguros y provocan muchos problemas.


FILANIZAR UN THREAD
La forma natural de que muera un thread es cuando termia de ejecutarse su método run(), pasando a estado dead.

Para realizar otra vez el trabajo desempeñado del thread, hay que:
  -> Crear un nuevo thread con new()
  -> Iniciar el thread con start()

isAlive() de la clase thread devuelve:
  -> true si el método esta alive, el thread esta recién creado o un dead thread.
  -> false si el método no está alive, el thread se encuentra ejecutablo o no ejecutable.
Un thread esta alive desde la llamada de su método start() hasta su muerte.


DORMIR UN THREAD CON sleep()
El método sleep() de la class thread recibe como parámetro el tiempo que queremos dormir un thread que lo invoca, despues vuelve a estar Runnable (Ready) para seguir ejecutandose.

Dos formas de llamar al método:
  -> Pasar el tiempo en milisegundos positivo.
  -> Agregar un segundo argumento entero (entra 1 y 999999), el cual, representa un tiempo extra en nanosegundos que se sumará al primer argumento.

* Cualquier llamada al método sleep() puede provocar una exepción, el compilador nos obliga a controlarla mediante un bloque try-catch.


GESTIÓN Y PLANIFICACIÓN DE THREADS

La EJECUCIÓN DE THREADS, requiere la planificación de una secuencia de ejecución (scheduling), y se puede realizar mediante:
  -> PARALELISMO, en un sistema con múltiples CPUs, cada uno puede ejecutar un thread diferente.
  -> PSEUDOPARALELISMO, cuando no es posible el paralelismo, una CPU ejecuta múltiple threads.

El SHEDULER es el planificador de threads de Java, utiliza un algoritmo de secuenciación de threads denominado fixed priority scheduling que se basa en un sistema de prioridades relativa,
de manera que el algoritmo secuencia la ejecución de threads en base a la prioridad de cada uno de ellos.
El FUNCIONAMIENTO DEL ALGORITMO es el siguiente:
  -> El thread elegido para ejecutarse, siempre es el Runnable de prioridad más alta.
  -> Si hay más de uno con la misma prioridad, el orden se maneja mediante un algoritmo por turnos (ROUD-RUBIN) basado en una cola circular FIFO.
  -> Cuando el thread que esta ejecutandose pasa al estado no ejecutable o muerto, se selecciona otro thread para su ejecución.
  -> La ejecución de un thread se interrumpe, si otro thread con prioridad más alta se vuelve Runnable -> PREEMPTIVE SHEDULING, cuando un thread con una priority mas alta interrumpa a otro.

La responsabilidad de ejecución de thread se del SO sobre el que corre la JVM y cada uno tiene un manejo distinto:
  -> SO QUE IMPLEMENTA TIME-SLICING (subdivisión de tiempo), el thread que entra en ejecución se mantiene en ella sólo un micro-intervalo de tiempo fijo o quantum de procesamiento,
de manera que el hilo ejecutandose no es solo interrumpido por otro con priority mas alta se vuelve ejecutable, sino que también cuando su cuanto de ejecución se acaba.
  -> SO QUE NO IMPLEMENTA TIME.SLICING, el hilo que entra en ejecución es ejecutado hasta su muerte, salvo que regrese a no ejecutable y otro hilo de prioridad más alta alcance el estado de ejecutable.


THREAD PRIORITY
Cada thread tiene su prioridad representada por un valor entero entre 1 y 10, cuanto mayor sea el valor, mayor es la prioridad.

El main thread siempre es creado con prioridad 5.
El resto de secondary threads heredan la prioridad que tenga en ese momento el hilo padre.

En la clase thread se definen 3 constantes para menejar prioridades:
  - MAX_PRIORITY(=10), valor que simboliza la mayor prioridad.
  - MIN_PRIORITY(=1), valor que simboliza la menor prioridad.
  - NORM_PRIORITY(=5), valor que simboliza prioridad normal, la que tiene por default el thread donde corre el método main().

Se puede obeter y modificar la thread priority mediante los siguientes métodos de la clase thread:
  -> getPriority(), devuelve la prioridad del thread.
  -> setPriority(), modifica la prioridad del thread.

* Cada sistema operativo tiene sus nivles de prioridad que pueden ser distintos de Java (Usar las constantes) *

Se puede conseguir aumentar el rendimiento de una aplicación multithread gestionando las diferentes prioridades de los threads.


THREADS EGOSISTAS
Un thread que entra en Runnable y no sale hasta su murte, impidiendo que otros thread entren en runnable hasta que el muera.
* Ocurre en SOs que no implementan el time-slicing. *

PROGRAMACIÓN EXPULSORA
Java da solución al problema de que el mismo programa Java se ejecute de diferente manera según el SO, dificultando así la portabilidad, a traves del método yield() de la clase java.lang.thread.
  -> yield(), hace que un thread que esta ejecutandose pase a preparado para permitir que otros threads de la misma priority puedan ejecutarse.

Sobre yield() y el egoísmo de los threads hay que tener en cuenta que:
  -> Su funcionamiento no esta garantizado, puede que después de que un thread invoque a yield() y pase a preparado, éste vuelva a ser elegido para ejecutarse.
  -> No se debe asumir que la ejecución de una app se realizará en un SO que implementa time-slicing.
  -> En la app hay que incluir adecuadamente las llamadas a yield(), incluso a sleep() o wait(), si el thread no se bloquea por una E/S.


SINCRONIZACIÓN Y COMUNICACIÓN DE THREAD
Hay ocasiones en las que distintos hilos de un programa necesitan establecer relación entre sí y compartir resources or info.
Dos situaciones entre threads:
  -> Dos o más compiten por obtener un mismo resource.
  -> Dos o más colaboran para obtener un fin común y para ello, necesitan comunicarse a través de algún resoruce.

Para que se ejecuten de manera controlada y coordinada y evitar así posbiles interferencias, utilizamos:
  -> SINCRONIZACIÓN, capadidad de informar de la situación de un hilo a otro, tiene como objetivo establecer la secuencialidad correcta del programa.
  -> COMUNICACIÓN, capacidad de transmitir información de un hilo a otro, tiene como objetivo el intercambio de información entre hilos para operar de forma coordinada.
En Java esto se consigue mediante:
  -> MONITORES, se crean para marcar bloques de código con la palabar synchronized.
  -> SEMÁFOROS, se pueden implementar própios o utilizar la clase Semaphore del paquete java.util.concurrent.
  -> NOTIFICACIONES, permiten comunicar hilos mediante los métodos wait(), notify(), notifyAll() de la clase java.lang.Object.

El paquete java.util.concurrent proporciona varias clases de sincronización que permiten la sincronización y comunicación entre hilos de una app multithreadring -> Semapher, CountDownLatch, CyclicBarrier y Exchanger.


INFORMACIÓN COMPARTIDA ENTRE THREADS
SECCIONES CRÍTICAS, son aquellas secciones de código que no pueden ejecutarse concurrentemente, pues en ellas se encuentran recursos o información que comparten diferentes hilos, y por lo tanto pueden ser problemáticas.

Una forma de proteger secciones críticas es mediante la sincronización, que se consigue mediante:
  -> EXCLUSIÓN MÚTUA, asegurar que un hilo tiene acceso a la sección crítica de forma exclusiva y por un tiempo finito.
  -> POR CONDICIÓN, asegurar que un hilo no progrese hasta que se cumpla una determinada condición.

En Java la sincronización de acceso a recursos compartidos se basa en el concepto de monitor.


MONITORES - MÉTODOS SYNCHRONIZED
Es una porción de código protegida por un mute o lock.

Para crear un monitor en Java, hay que marcar un bloque de códiog con synchronized, pudiendo ser ese bloque:
  -> Un método complet.
  -> Cualquier segmento de código.

Añadir Synchronized a un método significará que:
  -> Se crea un monitor asociado al objeto.
  -> Sólo un thread puede ejecutar el método synchronized de ese objeto a la vez.
  -> Los threads que necesitan acceder al método permanecerán bloqueados y en espera.
  -> Cuando el hilo finaliza la ejecución del método, los hilos en espera de poder ejecutarlo se desbloquearán, el planificador Java seleccionará a uno de ellos.

* Interesa marcar como synchronized los bloques que correspondan a secciones críticas y contengan el código o datos que comparten los hilos.

MONITORES - SEGMENTOS DE CÓDIGO SYNCHRONIZED
Hay veces que no se puede o no interesa sincronizar un método, la solución es poner las llamadas a los métodos que se quieren sincronizar dentro de segmentos sincronizados:
    
            synchronized(object){//sentencias segmento;}

En este caso el funcionamiento es el siguiente:
  -> El objeto, es donde está el método que se quiere sincronizar.
  -> Dentro del segmento se hará la llamada al método que se quiere sincronizar.
  -> El thread que entra en el segmento declarado synchronized se hará con el monitor del objeto, si esta libre, o se bloqueará en espera de que quede libre. 
El monitor se libera al salir del thread del segmento de códiog synchronized.
  -> Sólo un thread puede ejecutar el segmento synchronized a la vez.

Hay que tener en cuenta que:
  -> Declarar un método o segmento como sincronizado ralentizará la ejecución del programa, ya que la adquisición y liberación de monitores genera sobrecarga.
  -> Siempre que sea posible, por legibilidad del código, es mejor sincronizar métodos completos.
  -> Al declarar bloques synchronized puede aparecer interbloqueo.

* Muchos métodos de las clases predefinidas de Java ya están sincronizados *


COMUNICACIÓN ENTRE HILOS CON MÉTODOS java.lang.Object
La comunicación entre hilos la podemos ver como un mecanismo de auto-sincronización, consistente en lograr que un hilo actúe cuando otro a concluido cierta actividad.

Java soporta la comunicación entre hilos mediante los siguientes objetos de la clase java.lang.Object:
  -> whait(), detiene el hilo, el cual no se reanudará hasta que otro hilo notifique que ha ocurrido lo esperado.
  -> whaint(long time), como el anterior, ahora el hilo se vuelve ejecutable tambien si ha concluido el tiempo pasado.
  -> notify(), notifica a uno de los hilos puestos en espera para el mismo objeto, que ya puede continuar.
  -> notifyAll(), notifica a todos los hilos puestos en espera para el mismo objeto que ya pueden continuar.
* La llamada a estos métodos se realiza dentro de bloques syncronized. *

Problemas cásicos para el uso de sincronizar y comunicar hilos:
  -> Productor-Consumidor, permite modelar situaciones en las que se divide el trabajo entre los hilos.
modela el acceso simultáneo de varios hilos a una estructura de datos u otro recurso, de manera que unos hilos producen y almacenan los datos en el recursos y otros se encargan de eliminar y procesar esos datos.
  -> Lectores-Escritores, permite modelar el acceso simultáneo de varios hilos a un a db, fichero u otro recurso, unos queriendo leer y otros escribir o modificar datos.


INTERBLOQUEO - DEADLOCK
Consiste en que uno o más hilos, se bloquean o esperan indefinidamente, esto ocurre porque:
  -> Cada hilo espera a que le llegue un aviso de otro hilo que nunca llega.
  -> Todos los hilos, de forma circular, esperan para acceder a un recurso.

Principalmente se llega a interbloqueco cuando un hilo entra en un bloque synchronized y a su vez llama a otro bloque synchronized o bien a utiliar clases de java.util.concurrent que llevan implicita la exclusión mútua.

STARVATION (INANICIÓN), consiste en que un hilo es desestimado para su ejecución.
Se produce cuando un hilo no puede tener acceso regular a los recursos compartidos y no puede avanzar, quedando bloqueado.
Puede ocurrir por que el hilo nunca es seleccionado para su procesamiento o porque otros hilos que compiten por el recurso se lo impiden.


LA CLASE SEMAPHORE
Del paquete java.util.concurrent, permite definir un semáformo para controlar el acceso a un recurso compartido.

Para crear y usar un Semaphore:
  -> Indicar al constructor Semaphroe(int permits) el total de permisos que pueden dar para acceder al mismo tiempo el recurso compartido, coincide con el número de hilos que pueden acceder a la vez al recurso.
  -> Indicar al Semaphore mediante el método acquire(), que queremos acceder al recurso, o mediante acquire(int permisosAdquirir) cuantos permisos se quieren consumir al mismo tiempo.
  -> Indicar mediante el método release(), que libere el permiso, o mediante release(int permisosLiberar), cuantos permisos se quieren liberar al mismo tiempo.
  -> Hay otro constructor Semaphore(int permit, boolean fair) que mediante fair permite garantizar que el primer hilo en invocar acquire() será el primero en adequirir un permiso cuando sea liberado, es decir,
garantiza el orden de adquisición de permisos, según el orden en que lo solicitan.

La invocación de estos métodos, dependerá del uso de Semaphore:
  -> Si se usa para proteger secciones críticas, la llamada acquire() y release() se hará desde el recurso compartido o sección crítica y el número de permisos pasado al constructor será 1.
  -> Si se usa para comunicar hilos, un hilo invocará al método acquire() y otro al release() para trabajar así de manera coordinada.
El número de permisos pasado al constructor coincidira con el número máximo de hilos bloqueados en la cola o lista de espera para adquirir un permiso.


CLASE EXCHANGER
Del paquete java.util.concurrent, establece un punto de sincronización donde se intercambian objetos entre hilos.

La clase Exchanger<V> es genérica, lo que significa que habrá que especificar en <V> el tipo de objeto a compartir entre los hilos.
Existen 2 métodos definidos en esta clase:
  -> exange(V x)
  -> exange (V x, long timeout, TimeUnit unit)
Ambos permiten intercambiar objetos entre hilos.
El hilo que desea obtener la info esperará realizando una llamada al método exchange() hasta que el otro sitúe la info utilizando el mismo método o 
hasta que pase un periodo de tiempo establecido mediante el parámetro timeout.

El funcionamiento es el siguiente:
  -> Dos hilos intercambián objetos del mismo tipo, A y B.
  -> El hiloA inovocará a exchange(onbjetoA) y el hiloB invocara exchange(objetoB).
  -> El hilo que procese su llamada a exchange(object) en primer lugar, se bloqueará y quedará a la espera de que lo haga el segundo.
Cuando esto ocurra y se libere el bloqueo sobre ambos hilos, a la salida del método exchange(objectA) proporciona el objeto objetoB al hiloA, y el método exchange(objetoB) el objetoA al hiloB.

* Los intercambios se emplean típicamente cuando un hilo productor está rellenando una lista o búfer de datos, y otro hilo consumidor los está consumiendo. *

De esta forma cuando el consumidor empieza atratar la lista de datos entregados por el productor, el productor ya está produciendo una nueva lista, 
esta es la principal utilidad, que la producción y el consumo de datos, puedan tener lugar concurrente.


LA CLASE COUNTDOWNLATCH
Del paquete java.util.concurrent es un autilidad de sincronización que permite que uno o más threads esperen hasta que otros finalizen su trabajo.

Funcionamiento:
  -> Implementa un puntoo de espera que deniminaremos puerta de cierre, donde uno o más hilos esperan a que otros finalicen su trabajo.
  -> Los hilos que deben finalizar su trabajo se controloan mediante un contador que llamaremos cuenta atrás.
  -> Cuando la cuenta atras llega a 0 se reanudará el trabajo del hilo o hilos interrumpidos y puestos en espera.
  -> No sera posible volver a utilizar la cuenta atras (reiniciarla), si fuera necesario habria que pensar en utilizar la clase CycleBarrier.

Los aspectos mas importantes al usar la clase CountDownLatch:
  - Al constructor countDownLatch(int count), se le indica el total de hilos que deben completar su trabajo.
  - El hilo en curso desde el que se invoca el método await() esperará en la puerta de cierre hasta que la cuenta tome el valor 0.
También se puede utilizar await(long tiempoEsper, TimeUnit unit) para indicar que la esperá será hasta que la cuenta llega a 0 o se sobrepase el tiempo de espera.
  - La cuenta se irá decrementando mediante la invocación de countDown() y cuando llega a 0 se libera el hilo/s que estaban a la espera, continuando su ejecución.
  - No se puede reiniciar/reutilizar la cuenta atras una vez llega a 0.
  - El método getCount() obtiene el valor actual de la cuenta y generalmente se utiliza durante las pruebas y depuración del programa.


LA CLASE CYCLICBARRIER
Del paquete java.util.concurrent es una utilidad de sincronización que permite que uno o más thread esperen hasta que todos ellos finalicen su trabajo.

Funcionamiento:
  -> Implementa un punto de espera (barrier), donde cierto número de hilos esperan a que todos ellos finalicen su trabajo.
  -> Finalizado el trabajo de los hilos, se diapra la ejecución de una determinada acción o bien el hilo interrumpido continua con su trabajo.
  -> La barrier se llama cíclica, poruq se puede reutilizar después de que los hilos en espera hayan sido liberados tras finalizar su trabajo, también se puede reiniciar.

Aspectos importantes a usar la clase CyclicBarrirer:
  - Indicar al constructor CyclicBarrirer(in threadAcceden) el total de hilos que van a usar la barrier, este sirve para disparar la barrier.
  - La barrera se dispara cuando llega el último hilo.
  - Cuando se dispara, dependientdo del consturctor, CyclicBarrire(int hilos) o CyclicBarrier(in hilos, Runnable accionBarrera) se lanzara o no una acción y
entonces se liberan los hilos de la barrera. La acción puede ser realizada mediante cualquier objeto que implemente Runnable.
  - El método principal de la clase es await(), se utiliza para indicar que el hilo en curso ha concluido su trabajo y queda a la espera de que lo hagna los demas.

Otros métodos de clase usables:
  - await(long tiempo, TimeUnit unit), el hilo espera en la barrier hata que los demas finalicen o un tiempo.
  - reset(), reinicia la barrier al estado inicial.
  - getNumberWaiting(), número de hilos que estan a la espera.
  - getParties(), número de hilos requeridos para esa barrier.


APLICACIONES MULTIHILO
Deben reunir las siguientes propiedades:
  - SEGURIDAD, la app no llegará a un estado inconsistente por un mal uso de los resources compartidos, esto implica sincronizar hilos asegurando la exclusión mutua.
  - VIVEZA, la app no se bloqueará o probocará que un hilo no se pueda ejecutar, esto implica un comportamiento no egoísta de los hilos y la ausencia de interbloqueos e inanición.

La CORRECCIÓN DE LA APLICACIÓN se mide en función de la seguridad y viveza, pudiento tener:
  - CORRECCIÓN PARCIAL, se cumple la propiedad de seguridad, el programa termina y el resultado es el deseado.
  - CORRECCIÓN TOTAL, se cumplen la seguridad y viveza, el programa termina y el resultado es el correcto.

Aspectos a tener en cuenta al desarrollar una app multihilo:
  -> La situación de los hilos en la app:
    - Independientes, no es necesario sincronizar y/o comunicar hilos.
    - Colaborando y/o Compitiendo, es necesario sincronizar y/o comunicar los hilos, evitando interbloqueos y esperas indefinidas.
  -> Gestionar las prioridades, de manera que los hilos más importantes se ejecuten antes.
  -> No todos los SO implementan time-slicing.
  -> La ejecución de hilos es no-determinística.

Ventajas que podemos obener de usar las librerias aportadas por el lenguaje de programación(Java) para las apps multihilo,:
  - Facilitar la programación, requiere menos esfuerzos utilizar una clase estandar que desarrollarla para realizar la misma tarea.
  - Mayor rendimiento, los algoritmos usados han sido desarrollados por expertos en concurrencia y rendimiento.
  - Mayor fiabilidad, Las librerias o bibliotecas estándar han side diseñadas para evitar deadlocks, cambios de contexto innecesarios o condiciones de carrera, nos permiten garantizar un minimo de calidad en nuestro software.
  - Menor mantenimiento, el código que generemos será más legible y facil de actualizar.
  - Mayor productividad, el uso de una API estándra permite mejor coordinación entre developers y reduce el tiempo de aprendizaje.


OTRAS UTILIDADES DE CONCURRENCIA
  -> Interfaz Executor, programador de tareas, permite:
    - Realizar la ejecución de tares en un único hilo en segundo plano, en un nuevo hilo o en un pool de hilos.
    - Diseñar políticas propias de ejecución y añadirlas a Executro.
    - Ejecutar tareas mediante el método execute(), estas deben implementar la interfaz Runnable.
    - Hacer uso de  diferentes implemtaciones de Executor, como ExecutorService.
  -> Collections, cabe destacar:
    - Interfaz Queque, colección diseñada para almacenar elementos antes de procesarlos, ofreciendo diferentes operaciones como inserción, extracción e inspección.
    - Interfaz BlockingQueque, deseñada para colas de tipo productor/consumidor, y que son thread-safe, son capaces de esperar mientras no haya elementos almacenados en su cola.
    - Implementaciones concurrentes de Maps y List.
  -> La class Locks, proporciona implementaciones y tipos de bloqueos y desbloqueos entre métodos. Su funcionaidad es equivalente a Synchronized, 
     pero proporciona métodos que hacen más facil el uso de bloqueos y condiciones, entre ellos:
    - newCondition(), permite tener mayor control sobre el lock y genera un objeto tipo Condition asociado al bloqueo. Así el método await() indica cuándo deseamos esperar, 
y el método signal() permite indicar si una condición de bloqueo se activa, para finalizar la espera.
    - ReentranLock, permite realizar exclusión mutua utilizando monitores. El metodo lock() indicca que deseamos utilizar el recurso compartido y unlock() que hemos terminado de utilizarlos.
  -> Variables atómicas, java.util.concurrent.atomic, permiten definir recursos compartidos, sin la necesidad de proteger dichos recursos de forma explícita, ya que ellas internamente realizan dichas labores de protección.


LA INTERFAZ EXECUTOR Y LOS POOLS DE HILOS
Un THREAD POOL, es un básicamente un contenedor dentro del cual se crean e inician un número limitado de hilos, para ejecutar todas las tareas de una lista.

Normalmente para declarar un pool se delcara un objeto tipo ExecutorService utilizando alguno de los siguientes métodos de la clase estática Executors:
  -> newFixedTheradPool(int threadNumber), crea un pool con el número indicado de hilos, dichos hilos se reutilizan ciclicamente hasta terminar con las Tasks de la cola o lista.
  -> newCachedThreadPool(), crea un pool que crea hilos conforme se necesitan, pero puede reutilizar lo ya concluidos para no crear demasiados.
Los hilos inactivos por mucho tiempo son eliminados automáticamente.
  -> newSingleThreadExecutor(), crea un pool de un solo hilo, tiene como ventaja que si ocurre una excepción durante la ejecución de una tarea, no se detiene la ejecución de las siguientes.
  -> newScheduledExecutor(), crea un pool que va a ejecutar tareas programadas cada cierto tiempo, ya sea una vez o de manera repetitiva.
Es parecido a un objeto Timer, pero con la diferencia de que puede tener varios thread que irán realizando las tareas programadas conforme se desocupen.

Los objetos ExecutorService implements la interfaz Executor, que define el método execute(Runnable), alque hay que llamar una vez por cada tarea que deba ejecutarse por el pool.

La interface ExecutorService proporciona métodos para el control de la ejecución de las tareas, 
entre ellos el método shutdown() par indicarle al pool que los hilos no se van a reutilizar par new tasks y deben morir al finalizar su trabajo.


GESTIÓN DE EXCEPCIONES
Para la gestión de excepciones de una app multihilo se puede utilizar el método uncaughtExceptionHandler() de la clase thread, que permite definir un manejador de excepciones.

Creación de un MANEJADOR DE EXCEPCIONES:
  -> Crear una class que implements la interfaz thread.UncaughtExceptionHandler.
  -> Implements el método uncaughtException().


DEPURACIÓN Y DOCUMENTACIÓN
Tareas muy importantes:
  - DEPURACIÓN, corregir fallos y errores de funcionamiento del programa.
  - DOCUMENTACIÓN INTERNA, aportar legibilidad a nuestros programas.

Depuración de apps multihilo, es una tarea dificil debido a:
  - La ejecución de hilos tiene un comportamiento no determinístico.
  - Hay que controloar varios flujos de ejecución
  - Aparecen nuevos errores potenciales debidos a la compartición de recursos entre varios hilo:
    - Errores al no cumplir la exclusión mutua.
    - Errores al producirse interbloqueo.

Seguimientos de la pila de Java estáticos y dinámicos con métodos de la clase thread:
  - dumpStack(), muestra una traza de la pila del hilo en curso.
  - getAllStackTraces(), devuelve un Map de todos lo hilos vivos en la app.
  - getStackTrace(), devuelve el seguimiento de la pila dentro de un hilo en una app.
* Los gets permiten grabar los datos del seguimiento de pila en un log. *





























