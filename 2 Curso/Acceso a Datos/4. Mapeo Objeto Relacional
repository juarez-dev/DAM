MAPEO OBJETO RELACIONAL - ORM - OBJECT RELATIONAL MAPPING
Tecnica de programación que se utiliza con el propósito de convertir datos entre el utilizado en un lenguaje de programación orientado a objetos y el utilizado en una base de datos relacional, gracias a la persistencia.
Esto posiblita el uso en las DBs relacionelas de las características propias de la programación orientada a objetos(herencia y polimorfismo)

* Persistencia, la capacidad de los objetos de sobrevivir al proceso que los creó, permitiendo al developer almacenar, transferir y recuperar el estado de los objetos.

El ORM se encarga de convertir los objetos en regiistros y viceversa, simulando así tener una DB orientada a objetos.


HERRAMIENTAS ORM
Actúan como un puente que conecta las ventajas de los RDBMS con una buena representación de ellos en un lenguaje orientado a objetos.

* En el modelo relacional, cada fila de la tabla se mapea a un objeto y cada columna a una propiedad. *

CARACTERÍSTICAS
Una herramienta ORM permite tomar un objeto Java y hacerlo persistente, carga el objeto de la DB a memoria y permite hacer consultas a las tablas de la base de datos.

Ventajas de ORM
  - Ayudan a reducir el tiempo de desarrollo.
  - Abstracción e independencia de la base de datos.
  - Reutilización.
  - Permiten persistir objetos.
  - Permiten recuperar los objetos persistidos.
  - Lenguaje propio para realizar las consultas.
  - Incentivan la portabilidad y escalabilidad de los programas de software.

Desventajas de ORM
  - Tiempo utilizado en ele aprendizaje. Heramientas complejas por lo que su correcta utilización lleva un tiempo que hay que emplear en ver el funcionamiento correcto y ver todo el partido que se puede sacar.
  - Menor rendimiento, debido a que todas las consultas que se hagan sobre la DB, el sistema primero debe transformarlas al lenguaje propio de la herramienta, leer los registros y por último crear los objetos.
  - Sistemas complejos, normalmente la utilidad y el rendimiendo del ORM disminuye cuanto mayor es la complejidad del sistema relacional.


HERRAMIENTAS ORM MÁS UTILIZADAS
  - HIBERNATE
Herrameienta de Mapeo Objeto-Relacional para Java que facilita el mapeo de atribuots entre una DB relacional tradicional y el modelo de objetos de una app.
Utiliza archivos declarativos XML o anotaciones en los beans de las entidades que permiten establecer relaciones.
Es software libre, distribuido bajo los términos de la licencia GNY LGPL.
Puede ser utilizadoo con y sin JPA.

  - JAVA PERSISTENCE API (JPA)
Es una especificación de Sun Microsystems para la persistencia de objetos de Java a cualquier base de datos relacional.
Requiere de J2SE 1.5 o superior, ya que hace uso intensivo de las nuevas características de lenguaje Java, como anotaciones y los genéricos.

  - IBATIS
Framework de persistencia desarrollado por Apache Software Foundatión.
Es de código libre.
Sigue el mismo esquema de uso que Hibernate, se apoya en el mapeo de XML para persistir la info contenida en objetos en un repositorio relacional.


HIBERNATE
Nos vamos a centrar en el uso de Hibernate desde un Framework como Spring Boot para ver a continuación el uso de Hibernate en un app Java con JPA.
Incorporaremos como lectura la posibilidad de configurar un proyecto con xml, ya que hoy en día la mayoria de las apps lo utilizan con JPA.

SPRING FRAMEWORK, permite una excelente integración con Hibernate y Java Persistence API(JPA), proporcionando características como la IoC (Inversión of Control) como solución a problemas comunes.
Permite tambíen configurar funciones compatibles con herramientas de mapeo objeto-relacional a traves de Inyección de Dependencias.
Con el uso de un framework como Spring podemos lograr una separación clara de capas y un acoplamiento flexible de los objetos de la aplicación.
Esto significa evitar dependencias directas de los servicions empresariales en la estrategia de acceso a datos o transacciones, y utilizar Inyección de Dependencias para administrar recuros.
En resumen, Spring facilita la creación de DAOs ORM al proporcionar una infraestructura sólida y una forma eficiente de manejar recursos de persistencia.

El uso de Spring con ORM aporta:
  -> PRUEBAS MÁS SENCILLAS, la aproximación de IoC de expreing facilita la sustitución de implementaciones y ubicaciones de configuración para 
instancias de SessionFactory de Hibernate, DataSource de JDBC, administradores de transacciones y objetos mapeados.
  -> EN LAS EXCEPCIONES COMUNES DE ACCESO A DATOS, Spring convierte las excepciones del ORM en una jerarquía común de excepciones de tiempo en ejecición.
Esto simplifica el manejo de excepciones en las capas apropiadas sin necesidad de declaraciones innecesarias.
  -> GESTIÓN GENERAL DE RECURSOS, los contextos de aplicación de Spring manejan la ubicación y configuración de instancias de SessionFactory, EntityManagerFactory, DataSource y otros recursos relacionados.

* Inversion de Control, se especifican respuestas deseadas a sucesos o solicitudes de datos concretas, dejando que algún tipo de entidad o arquitectura externa lleve a cabo las acciones de control que se requiran
en el orden necesario y para el conjunto de sucesos que tengan que ocurrir. *
* Inyección de Dependencias, patrón de diseño que se encarga de extraer a responsabilidad de la creación de instancias de un compoente para delegarla en otro. *


ARQUITECTURA DE HIBERNATE
Es una arquitectura en capas para mantenerlo aislado de tener que conocer las API subyacentes. Hibernate usa los datos de la DB y proporciona persistencia entre los diferentes objetos.
Las interfaces que presenta Hibernate son las siguientes:
  -> Configuration, representa un archivo de configuración o propiedades requerido por la hibernación. El objeto de configuración proporciona dos componentes claves: Conexión a DB y configuracíon del mapeado de clase.
  -> Session Factory, Configura Hibernate para la app que utiliza el archivo de configuration suministrado y permite la creación de instancias del objeto Session.
  -> Session, se usa para obtener conexión física con una DB.
  -> Transaction, representa una unidad de trabajo con la DB y la mayor parte del RDBMS soporta la funcionalidad de transacción
Las transacciones en hibernación son manejadas por un gestor de transacciones subyacente y de transacción.
  -> Query, Objetos de consulta, utilizan SQL o Hibernate Query Language (HQL) para recuperar datos de la DB y crear objetos.


MAPEO CON SPRING BOOT
Se pueden destacar las siguientes características antes de ver los pasos a seguir para implementar una solución con Spring Boot y ORM:
- El framework es quien maneja el control del proyecto
- Tiene un ecosistema maduro.
- Programación con anotaciones, evita la generación de mucho código, fundamentalmente de configuración, que antes se hacía con XML.
- Se utiliza una DB externa.


CONFIGURACIÓN DE LA APLICACIÓN
    A. CREACIÓN DE UN NUEVO PROYECTO
Se marcan las opciones con las que configurar el proyecto y se genera el archivo, el cual será el proyecto:
  1. Lenguaje a utilizar.
  2. Herramienta de gestión.
  3. Version de Spring Boot.
  4. Dependencias necesárias:
    - Spring Web, para poder realizar el backend de una app web.
    - Spring Data JPA, para utilizar JPA en una app.
    - MySQL Driver, conexión con la DB externa.
  5. Dependencia recomendable -> Spring Boot Dev Tools, ayuda a manejar la recarga de la aplicación y mejorar la experiencia del developer.
    B. CREACIÓN DE LAS DEPENDENCIAS
Vamos a utilizar Maven y por lo tanto tenemos un archivo pom.xml en el que se incluiran las dependencias que nos permitan trabajar son Spring Data utilizando una DB mysql.
    C. CONFIGURACIÓN DE LA BASE DE DATOS
En el archivo applicantiion.properties (src/main/resources) de Spring hay que indicar la información relativa a la DB que se utiliza.
Los datos a proporcionar son los mismos que los utilizádos con la conexión JDBC:
  - URL.
  - USERNAME.
  - PASSWORD.
La sentencia spring.jpa.hibernate.ddl-auto tiene varias posibilidades en función del uso que tenga hibernate con jpa en el proyecto:
  - create -> cuando arranque el proyecto hibernate se encargará de crear las tablas en la db indicada, en base a las anotaciones puestas en las clases a persistir.
  - create-drop -> cuando arranque la app se crearan las tablas, al finalizar se destruyen.
  - update -> cuando arranque la aplicación se actualizará la estructura de las tablas segun lo indicado, siempre que sea posible.
Se puede activar el logging de las sentencias que va ejecutando Hibernate en la consola con la siguiente opción:
      spring.java.properties.hibernate.show_sql=true;

CONFIGURACIÓN DE LAS CLASES A PERSISTIR
Todas las clases a persistir deben ser anotadas para que se pueda realizar su mapeo, se pueden tener clases que no son alojadas en la DB.

Se indicará con anotaciones:
  - Qué entidades se quieren en la DB.
  - Nombres de los campos de la tabla y características.
  - Clave primaria y autogeneración si es el caso.
  - Relaciones entre tablas.

ANOTACIONES BÁSICAS
    @Table(name="name"), Tabla con la que la entidad se va a mapear.
    @Entity( name="name"), Registra la entidad.
    @Id, Identificador de la entidad, será la clave primaria en la tabla.
    @Embeddedld, Mapeo claves primarias compuestas.
    @GeneratedValue(strategy=GanerationType.IDENTITY), permite el autocincremento de las claves primarias en la DB, en una DB MySQL el autoincremento se realizará con Generation Type.IDENTITY.
    @Column(name="name", nullable=true/false, length=int, unique=true/false), especifica los atributos del campo de la tabla.
    @Transient, el atributo que está anotado con transient no se persiste.
    @Enumerated(EnumType.STRING/ORDINAL), permite anotar campos enumerados de Java(Enum) y almacenarlos en la tabla como enteros o String.
    @Temporal(TemporalType.TIMESTAMP/DATE), utilizado para fechas.


RELACIONES

  ANOTACIONES PARA RELACIONES
    @OneToOne, mapeo de relaciones 1:1.
    @OneToMany, mapeo de relaciones 1:N.
    @ManyToOne, mapeo de relaciones N:1.
    @ManyToMany, mapeo de relaciones N:M.
      Sus Atributos:
        - mappedBy = "attribute_name".
        - cascade = type of propagation changes.
        - orphanRemoval = true/false
        - fetch = Fetch Type.LAZY/EAGER.
    @JoinTable(name=table_name), se especifica el nombre de la tabla que realiza el mapeo.
    @MapsId.

  CONCEPTOS IMPORTANTES PARA EL MANEJO DE RELACIONES
    - ENTIDAD PADRE, aquella que sea fundamental en la relación, sin la cual la otra entidad dejaría de tener sentido.
    - ENTIDAD OWNER, la que va a llevar la clave foránea.
    - RELACIÓN UNIDIRECCIONAL, si en la clase sólo se añade atributo en uno de los lados, de esta forma solo podremos acceder a los datos desde uno de los lados de la relación.
    - RELACIÓN BIDIRECCIONAL, si se puede acceder desde los hijos al padre y viceversa, para ello no se crearan 2 relaciones en la DB, sino que se anotara con @JoinColumn y mappedBy
@JoinColumn permite indicar el nombre de la columna a la que se hace referencia en la tabla hija.
mappedBy establece una relación bidireccional ya que a pesar de tener una única Foreing Key, se pueden relacionar ambas tablas. Con esto se consigue aclarar donde se debe incluir la clave que mapea las relaciones.
Normalmente estará en la clase padre.

  CARGA DE DATOS EAGER O LAZY
La forma de carga de datos puede impactar directamente en la eficiencia de la app ya que se puede sobrecargar la memoria y/o realizar una transferencia de datos demasiado costosa.
    - EAGER, cuando se carga el objeto, se cargan todos los relacionados con él.
    - LAZY, el objeto relacionado no se carga hasta que no sea necesário.
En JPA, por defecto, @ManyToOne es EAGER y @OneToMany es LAZY.

  PROPAGACIÓN DE CAMBIOS
Cuando se realiza una operación en una entidad padre, puede que las entidades relacionadas se vean afectadas.
Esta operación, por defecto, no se propagará a otras entidades que tienen relación con la entidad que se está modificando.
Se puede decidir como se maneja en una entidad la propagacion de cambios con el atributo Cascade y los tipos u operaciones:
    - ALL, propaga todos los cambios del padre al hijo.
    - PERSIST, cuando se almacena el padre, se almacena en el hijo.
    - MERGE, copia el estado de un objeto en el persistente con el mismo id, propaga la operación merge.
    - REMOVE, propaga la eliminación.
    - REFRESH, vuelve a leer una instancia de la DB, si se utiliza, tambíen el hijo se vuelve a leer cuando se utiliza en el padre.
    - DETACH, elimina un objeto del contexto de persistencia, si se elimina el padre, también el hijo.

  RELACIONES OPCIONALES Y OBLIGATORIAS
Que una operación sea opcional impica que se puede almacenar el objeto en la DB sin asignarle el objeto relacionado.
  @OneToMani siempre es opcional.
  @ManyToOne es por defecto opcional, pero se puede cambiar.
Con la forma de propagación de cambios también se pueden gestionar los cambios con el tipo que elijamos.

  ELIMINACIONES AUTOMÁTICAS (HUÉRFANOS)
Con orphanRemoval=true se especifica que la entidad hijo debe ser eliminada automáticamente por el propio ORM si ha dejado de ser referenciada por una entidad padre.


  -> RELACIONES 1:1
Se anotan con @OneToOne
Si es unidirecional, se anota el atributo solo en la entidad propietaria.
Si es bidireccional, se anota en las dos y con el atributo mappedBy.
Si se quiere que se propagenia los cambios se utiliza el tipo de CascadeType deseado.
  -> RELACIONES 1:N
No participan las 2 entidades con la misma cardinalidad, se anotan con @OneToMany y @ManyToOne y ello depende de la función de la entidad en la relación.
Si la entidad es propietaria, la anotación es @ManyToOne, irá asociada a un atributa.
Si es bidireccional, se anota la entidad padre con @OneToMany y para que no haya más de una clave foránea en la DB, se indica con mappedBy el atributo al que hace referencia.
Con @JoinColumn se indica el nombre del atributo en la DB, se puede indicar también el nombre de la restricción de Foreing Key que se cree con el atributo foreingKey.
Se puede además asignar el tipo de propagación deseado, si hay huérfanos, opcionales, etc.
  -> RELACIONES N:M
Se anotan con @ManyToMany en ambas entidades si la relación es bidireccional y se creará una tabla intermedia a la que se pude nombrar con @JoinTable y asignar atributos como el nombre de las columnas de la tabla intermedia.
Conviene asignar al atributo de la entidad un Set en lugar de un List en el campo de la asociación, por ser más eficiente su uso por parte de Hibernate.
Se puede indicar el tipo de propagacion de cambios y otras características.


REPOSITORIO BÁSICO
Debe heredar de una interfaz que existe en Spring y que gestionará todas las operaciones básicas.

MÉTODOS BÁSICOS que se pueden añadir al repositório
  findByAtributo.
  Añadir sentencias sql a través de @Query.
  Añadir sentencias a través de JPQL( lenguaje específico para ello).


CONSULTAS CON JPQL
JPQL es un lenguaje de consulta que utiliza un modelo de clases para definir las queries en lugar de las tablas de la DB.
Hibernate transformará de JPQL a SQL de la DB.
  1. Selección de atributos de una clase -> SELECT objeto FROM Entidad objeto.
  2. Selección de varias clases relacionadas -> SELECT a, b From Entidad a JOIN a.parametro b -> (no queda muy claro, pero bueno ya lo veré en algun ejercicio).


MAPEO CON HIBERNATE Y JPA
Se puede utilizar un proyecto Java sin Framework añadido y utilizar Hibernate con JPA.
Los pasos a seguir para tener el proyecto completamente configurado:
  1. Creación del proyecto y utilización de Maven. Incorporación de dependencias.
  2. Creación de las clases y asignación de las anotaciones.
  3. Generar el acceso a datos.

CONFIGURACIÓN DE LA APLICACIÓN
* PASO 1 -> Crear un new project Java, convertir el proyecto en Maven Project o crearlo directamente como project Maven.
Para incorporar las librerías, se añaden al fichero de configuración pom.xml las dependencias necesárias:
  - El conector MySQL.
  - Hibernate core y commons.
* PASO 2 -> Añadir la configuración de la base de datos y de las conexiones
Se crea a nivel de src, un archivo (hibernate.cfg.xml) en el que se incluyen todas las características de configuración.
Apartados/Sentencias del archivo:
  - Dialecto utilizado para MySQL.
  - Configuración de la conexión para la DB.
  - Opción para mostrar las sentencias sql por pantalla.
  - Parámetro de conexiones para Hibernate.
  - Contexto de sesión.
  - Forma de conectarse a la DB, creat, create-drop o update.
  - Los ficheros de las entidades creadas que llevan las anotaciones.

CONFIGURACIÓN DE LAS CLASES A PERSISTIR
Tanto las clases como las relaciones entre ellas hay que indicarlas mediante anotaciones JPA.


SESIONES Y TRANSACCIONES
Para realizar las operaciones sobre la DB es necesario manejar las sesiones y dentro de ellas, las distintas transacciones a realizar.

  SESIONES
Una sesion es una interfaz que en Hibernate representa una unidade de trabajo en un hilo único, utilizara a su vez una conexión JDBC y se utiliza para realizar operaciones en la DB.
La función es ofrecer las operaciones de creación, lectura y borrado para instancias de clases mapeadas.
Para realizar la operación hay que abrir la sesión, operar y cerrar la sesión
Una vez abierta la sesión, las instancias utilizadas quedarán unidas a esta, hasta que se cierre.

Una instancia puede estar en uno de los siguientes estados:
  - Transient, objeto recién creado que no ha sido enlazado con el gestor de persistencia.
  - Persistent, objeto enlazado con la sesión, todo los cambios que se realicen serán persistentes.
  - Detached, objeto persistente que sigue en memoria despúes de terminar la sesión, existe en Java y en la DB.
  - Removed, objeto marcado para ser borrado de la DB, existe en Java y se borrará de la DB al terminar la sesión.

Una sesión no obtendrá una Connection JDBC o un Datasource a menos que sea necesario.
No consumirá resources hasta que se utilice.
Las sesiones deben cerrarse al terminar la operación por seguridad de la app.

El patrón más común en una app multiuser cliente/servidor es sesión-por-petición, por cada petición del cliente se envia al al servidor, en donde se ejecuta la capa de persistencia de Hibernate.
Se abre una nueva Session de Hibernate y todas las operaciones de la DB se ejecutan en esta unidad de trabajo, una vez completado y una vez se ha preparado la respuesta para el cliente, se limia la Session y se cierra.

  TRANSACCIONES
La transacción nunca es opcional, toda comunicación tiene que estar dentro de una transacción, evitando el auto-commit.
Las transacciones deben ser cortas, para evitar bloqueos en la DB, de lo contrario, el escalado de la app en un entorno de alta concurrencia se verá comprometido.

En Hibernate las transacciones se manejan con la intrefaz org.hibernate.Transaction, que proporciona los métodos para controlar el ciclo de vida de la transacción:
  -  beingTransaction() -> método de la sesión, para comenzar.
  - commit() -> para finalizar y entonces se sincronizarán los cambios.
  - rollback() para anular los cambios si ocurre un error.

Cada vez que se realiza una operación sobre la DB hay que manejar la sesión y la transacción realizada.


CARGA DE OBJETOS
 -> load() de la clase Session suministra un mecanismo para capturar una instancia persistente, si conocemos su indentificador, este método acepta un objeto Class y cargará el estado de una nueva instancia de esa clase,
inicializada en estado persistente.
Se lanzará una excepción irrecuperable si no existe la fila de DB correspondiente, si no se esta seguro de su existencia, debe usarse el método get(), el cual consulta la DB inmediatamente y devuelve null si no existe.
load() intenta devolver un bojeto proxy siempre y cuando sea posible, con lo que es posible que la excepción sea lanzada cuando se inicialice el objeto proxi -> carga perezosa.
En el caso de obtener un proxi, no tiene impacto en la DB, hasta que no se inicializa el mismo, es muy útil cuando se obtiene una referencia de un objeto para asociarlo con otro, se modifica un objeto persistente.


ALMACENAMIENTO Y MODIFICACIÓN DE OBJETOS PERSISTENTES
El proceso de ALMACENAR sigue los siguientes pasos:
  1. Se instancia un objeto nuevo (Estado Transitorio).
  2. Se obtiene una sesión y se comienza la transacción, iniciando el contexto de la persistencia.
  3. Se llama al método save(), el cual introduce el objeto en el contexto de persistencia, el método devuelve el identificador del objeto persistido.
  4. Para sincronizar los cambios en la DB, se necesita hacer commit de la transacción. Dentro del objeto se llama al método flush(), en este se obtiene la conexión JDBC para poder ejecutar la sentencia oportuna.
  5. Finalmente, la sesión se cierra, con el objeto de liberar el contexto de persistencia, devolviendo así la referencia del objeto creado al estado disociado.

Los objetos cargados, grabados, creados o consultados por la sesión pueden ser manipulados por la app, y cualquier cambio a su estado de persistencia será persistido cuando se aplique "flush" a la sesión.
No hay que invocar ningún método en particular para que las modificaciones se vuelvan persistentes, así que la manera más sencilla y directa de actualizar el estado de un objeto es cargarlo con load(),
y luego manipularlo directamente, mientras la sesión esté activa.

Para BORRAR OBJETOS PERSISTENTES, se puede ejecutar Session.delete(), que quitará el estado de un objeto en la DB, su aplicación podría tener aún referencia al objeto quitado.
Se puede borrar objetos en cualquier orden, no se van a producir violaciones de llave externa, pero si se pueden producir de constrains NOT NULL aplicadas a la columna de llave externa.

Muchas apps necesitan capturar un objeto en una transacción, mandarlo a la capa de interfaz de usuario para su manipuación, y grabar sus cambios en una nueva transacción.
Las apps que usan esta estrategia en entornos de alta concurrencia, normalmente usan datos versionados para garantizar aislamiento durante la larga unidad de trabajo.
Hibernate soporta este modelo, poveyendo reasociación de entidades desprendidas usando los métodos Session.update() o Session.merge().


UTILIZACIÓN DE SENTENCIAS DE CONSULTA
Las operaciones básicas sobre la DB:
  -> save(), creación.
  -> delete(), borrado.
  -> consultas:
      -> Recuperar una instancia, desde la sesión abierta utilizamos el método get -> return session.get(Employee.class, id);
      -> Utilización de sql nativo para consultas, se utiliza el método createNativeQuery("Query", clase).list() también de la sesión -> Session.createSQLQuery();


LENGUAJES PROPIOS DE LA HERRAMIENTA ORM

HQL -> Hibernate Query Languaje, completamente orientado a objetos y comprende nociones como herencia, polimorfismo y asociación.
Las consultas escritas en HQL Hibernate se encarga de convertirlas a SQL y ejecutarla para realizar la operación indicada.
Es case-insensitive, sus sentencias pueden escribirse en máyusculas/minúsculas, hay que tener cuidado con los nombres de las clases recuperadas y sus propiedades, ahí si se distinguen mayus/minus.

Entre las sentencias más importantes de HQL:
  -> Soporte completo para operaciones relacionales -> permite representar consultas SQL, usa clases y atributos o propiedades en vez de talbas y columnas.
  -> Regresa sus resultados en forma de objetos.
  -> Consultas Polimórficas -> posibilidad de declarar el resultado usando el tipo de superclase e Hibernate se encarga de crear los objetos adecuados de las subclases correctas automáticamente.
  -> Soporte para características avanzadas -> paginación, fetch joins con perfiles dinámicos, inner y outer joins, etc. Además soporta proyecciones, funciones de agrupación y agrupamientos, ordenamientos y subconsultas.
  -> Independiente del manejador de DB -> las consultas son independientes de la DB.

JPQL -> Java Persistence Query Languaje, inspirado en un subconjunto de HQL, una consulta JPQL es siempre válida en HQL, a la inversa no siempre es válida.


SINTAXIS DEL LENGUAJE HQL
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------















