MANEJO DE CONECTORES
DBMS -> Database Managment System
RDMBS -> Relational Database Managment System
JDBC -> Java DataBase Connectivity, simplifica el acceso a las bases de datos relacionales, proporciona un lenguaje mediante el cual las apps pueden comunicarse con motores de bases de datos.

DESFASE OBJETO RELACIONAL o IMPEDANCIA OBJETO-RELACIONAL, la diferencia de aspectos que existen entre la programación orientada a objetos y la base de datos relacional, 
conjunto de deificultades técnicas que surgen cuando una db se usa en un conjunto con un programa escrito en POO:
  - Lenguaje de programación.
  - Tipos de datos.
  - Paradigma de programación.

El m. realacional trata con relaciones y conjuntos debido a su naturaleza matemática.
El m. de POO trata con objetos y asociaciones entre ellos.

La escritura/lectura mediante JDBC implica
  - Abrir una conexión.
  - Crear una sentencia SQL.
  - Copiar todos los valores de las propiedades de un objeto en la sentencia, ejecutarla y así almacenar el objeto.


PROTOCOLO DE ACCESO A BASE DE DATOS
Cada SGDB tiene su propia conexión y su propio API.

ODBC -> Open DataBase Conectivity. Este sistema de conexión es configurado usando diferentes drivers y un API estándar.

Clase JDBC DriveManager, es responsable de localizar un controlador JDBC que necesita la aplicación. 
Cuando un app cliente solicita una conexión de DB, la solicitud se expresa en forma de una URL.
Una URL de JDBC es similar a las de un navegador web.


CONECTORES O DRIVERS
Conjunto de clases encargadas de implementar los interfaces del API y acceder a la DB.
Suele ser un fichero .jar que contiene una implementación de todas las interfacesl del API JDBC.


ARQUITECTURA JDBC
MODELO DE DOS CAPAS, una aplicación se comunica directamente a la fuente de datos. Esto necesita un conector JDBC que pueda comunicar con la fuente de datos específica a la que acceder.
Cliente/Servidor, las instrucciones de usuario se envian a la DB y los resultados se devuelven al user.

MODELO EN TRES CAPAS, los comandos se envian a una capa intermedia de servicios, la cual envía los comandos a la fuente de datos, esta los procesa y envía los resultados de vuelta a la capa intermedia,
desde ahí se envían al user.


CONECTOR TIPO 2
Los conectores tipo 1 -> JDBC-ODBC Bridge, proporcionan un puente entre el API JDBC y el API ODBC.
El driver JDBC.ODBC Bridge traduce las llamadas JDBC a llamadas ODBC y las envía a la fuente de datos ODBC.
Este tipo de driver va incluido en el JDK.

CONECTOR TIPO 2 - API NATIVA
Convierten las llamadas JDBC a llamadas específicas de la DB para bases de datos como SQL Server, Informix, Oracle o Sybase.
Comunica directamente con el servidor de bases de datos, por lo que es necesario que haya códiogo en la máquina cliente.

*Los conectores tipo 1 y 2 utilizan código nativo vía JNI(Java Native Interface), por lo que son más eficientes.


CONECTOR TIPO 3 - JDBC-Net pure Java driver
Tiene un aproximación de tres capas.
Las peticiones JDBC a la base de datos se pasan a través de la red al servidor de la capa intermedia (middleware), 
el servidor traduce el protocolo independientemente del SGDB a protocolo específico del sistema gestor y se envía a la DB.
Los resultados se mandan de vuelta al middleware y se enrutan al cliente.
* Es útil para aplicaciones en Internet.

CONECTOR TIPO 4 - PROTOCOLO NATIVO
Convierten directameente las llamadas JDBC al protocolo de red usado poor el SGDB, esto permite una llamada directa desde la máquina cliente al servidor del SGDB y una solución excelente para acceso en tntranets.


CONEXIÓN A UN DB
En java podemos utilizar el método getConnection() de la clase DriverManager, recibe una URL de JDBC que identifica a la DB con la que queremos realizar la conexión.
Se devuelve un objeto Connection que representa la conexión con la DB.


CREACIÓN DE LA BASE DE DATOS
DRIVERS MySQL
Proporciona drivers basados en estándares para JDBC, ODBC y .Net.
Proporciona conectiividad para aplicaciones clientes desarrolladas en Java con MySQL Connectro/j, que implemente la API JDBC, tambien soporta el nuevo X DevAPI.
MySQL Connector/J es Tipo 4.

DRIVERS DE Oracle
JDBC Thin Driver, utiliza sockets de Java para conectarse directamente a Oracle.
Proporciona su propia version TCP/IP del protocolo SQL*Net de Oracle.


INSTALAR EL CONECTOR DE LA DB
MySQL.
La función del conector es traducir los comandos del API JDBC al protocolo nativo del SGDB.
Necesitoamos instalar el conector de la base de datos en el IDE.

Oracle.
Se hace de la misma forma que en MySQL
  - Se utliza el driver ojdbc11.jar o ojdb8.jar que se pueden descargar en la página de Oracle. Dese el IDE añadimos la libreria y configuramos el Build Path.
  - La cadena de conexion recomendada es la que utiliza el Service Name: host:port:service_name

  **** Se puede utilizar Maven para obtener el conector en el proyecto añadiendo la dependencia a pom.xml ****


JDBC CONEXIÓN A UNA BASE DE DATOS
En Java tenemos la clase DriverManager, para establecer una conexión con una base de datos podemos utilizar el método getConnectión(), el cual devuelve un objeto Connection que representa la conexión con la DB.
El objeto Connection está totalmente vinculado a una DB:
      getConnection(String url)      ;        getConnection(String url, Properties info)       ;       getConnectión(String url, String user, String password)

Cuando se presenta con una URL específica, DirveManager itera sobre la colección de drivers registrados hasta que uno de ellos reconoce la URL, si no se encuentra ningún conector adecuado -> SQLException.
 URL -> 3 valores separados por :
    - Protocolo, para las URL JDBC siempre es -> dbc
    - Subprotoclolo.
    - Nombre se sistema para establecer la conexión con un sistema específico, depende del controlador usado, del host donde se aloje el SGDB, del puntero que se use par escucar las petidiones y del nombre de la DB o esquema.

Existen 2 valores especiales que pueden utilizarse para conectarse con la DB local:
    - LOCAL
    - localhost
Son sensibles a las minúsculas y mayúsculas, puede suminstrarse un nombre de sistema específico.


OPERACIONES EN LA DB
Se pueden realizar 4 sentencias DML(Data Manipulanting Languaje):
  - Consultas -> SELECT.
  - Insercciones de registros -> INSERT.
  - Actualización de datos de registros -> UPDATE.
  - Borrado de registros -> DELETE.

Las sentencias utilizadas para realizar las anteriores :
  - Statement, para sentencias sencillas SQL.
  - PreparedStatement, para consultas preparadas (ej. las que tienen parámetros).
  - CallableStatement, para ejecutar procedimientos almacenados en la DB.


REALIZACIÓN DE CONSULTAS

Para operar con una db:
  1. CARGAR EL DRIVER necesario para comprender el protocolo que usa la db.
  2. ESTABLECER UNA CONEXIÓN con la db.
  3. ENVIAR CONSULTAS y procesar el resultado.
  4. LIBERAR LOS RECURSOS al terminar.
  5. GESTIONAR LOS ERRORES que se puedan producir.

Para hacer consultas en la db:
  - Crear un objeto de tipo Stetement o PreparedStatement.
  - Ejecutar la consulta con el método executeQuery(query), query es una Stríng con la query sql.
  - Recorrer el ResultSet que devuelve este método.

ResultSet, es una clase de java.sql que condendrá todos los registros de la consulta.
Para obtener los registors, recorresmos con un cursor los datos.
El cursor con el método .next obtendra cada registor y devolverá false cuando llegue al final.
Los métodos getInt(), getString(), ... tendrán como párametro el nombre del atributo de la query realizada o la posición del atributo en la parte de proyeccioón de la select(Comienza en 1).


EJECUCIÓN DE SENTENCIAS INSERT, UPDATE Y DELETE.
Desde el punto de vista de la comunicación con el SGDB se comportan de manera similiar, siguiendo el siguiente patrón:
  1. Instanciamos un objeto Statement, a partir  de una conexión activa.
  2. Ejecutamos la sentencia SQL, con executeUpdate.
  3. Cerramos el objeto Statement instanciado.
  4. Cerramos la conexión activa.

executeUpdate devuelve un número entero, que representa el número de filas afectadas por la instrucción SQL.


PROCEDIMIENTOS DE ALMACENADOS EN LA DB
Son subprogramas almacenados en la db, se ejecutara en la db y devolverá sólo los datos necesários.

Suelen ser de 2 clases:
  - PROCEDIMIENTOS almacenados, el típico tiene:
    - Un nombre.
    - Una lista de parámetros.
    - Unas sentencias SQL.
  - FUNCIONES que devuelven un valor que se puede emplear en otras sentencias SQL.

-> Las llamadas a los procedimientos se hacen sobre una conexión:
  CallabelStatement = prepareCall(Connection);
-> La llamada al procedimiento almacenado debe de ser un String "" e ir entre llaves {}, dando los parámetros reales que espera el procedimiento almacenado:
  CallableStatement("{CALL nombre_procedimiento(?)}");
-> El procedimiento se ejecuta cuando llamamos al método execute, en el momento que se ejecute tienen que estar definidos los parámetros de entrada y salida:
  CallableStatement.execute();


SENTENCIAS PREPARADAS
PreparedStatement para enviar sentencias de SQL a la DB, este tipo especial se deriva de Statement.
Es una sentencia SQL de DB precompilada, al estar precompilada, su ejecución es más rápida que una SQL convencional, por lo que es más adecuada cuando se ejecuta la misma sentencia SQL(con distintos valores) muchas veces.

Uso:
Se ponen interrogantes '?' donde van los valores concretos que vamos a utilizar, cada uno se identifica luego con un número.
Con los métodos set() se rellenan esos valores, el primer parámetro es el número del interrogante y el segundo el valor que se quiere utilizar.
Finalmente se llama a executeUpdate().
Luego con el PreparedStatement, ponemos otros valores volviendo a llamar a los métodos set() y volvemos a llamar a execute().
setInt() y setString() hacen las conversiones necesarias.
  EJEMPLO -> si pones setInt(n,x) -> en el 'n-interrognate' se coloca el valor entero x; luego se hara así con todos los valores y con executeUpdate() ejecutamos la consulta con los valores seteados.


LIBERACIÓN DE RECURSOS
Las conexiones con una DB consumen muchos recursos en el sistema gestor, y por lo tanto en el sistema informático en general, por esto, conviene cerrarlas con elmétodo close() al dejar de utilizarlas.
También es conveniente cerrar la ejecición de procedimientos almacenados CallableStatement, las sentencias Statement/PreparedStatement y los resultados ResultSet para liberar los recursos.

GESTIÓN DE ERRORES
El manejo de excepciones permite manejar condiciones excepcionales tales como errores definidos por el programa de una manera controlada.
Cuando se produce una, se lanza una excepción, la ejecución se detiene y el control se redirige a la cláusula de captura catch más cercana, si no existe el programa finaliza.


TRANSACCIONES
Ejecuntan una serie de consultas SQL en conjunto, aseguran la ejecución de todas.
Se pueden "deshacer" los cambios efectuados en las tablas si no se han podido realizar todas las operaciones de la transacción.

Al ejecutar una transacción, el motor de DB garaniza, la atomicidad, consistencia, aislamiento y durabilidad ACID de la transacción que se utilice.

El control de la transacción es realizado por el objeto de la conexión, cuando se crea tiene pordefecto el modo autocommit, significa que cada operación DML es tratada como una transacción por sí misma
que se valida automáticamente en cuanto se ejecute.

Para agrupar varias sentencias SQL en una única transacción:
  1. Modificamos el autocomit -> conexion.setAutocommit(fase);
  2. Ejecutamos las sentencias.
  3. Finalizamos la transacción manualmente -> conexion.Commit.

COMMIT Y ROLLBACK
  - Si una transacción finaliza correctamente lo hará con COMMIT, se realizan los cambios en la DB.
  - Si hay algun fallo se ejecuta ROLLBACK, se deshacen los cambios hechos hasta el momento.

Normalmente se trabaja con autocommit a true con la clase Connection.

El modo autocomit=false las transacciones quedan definidas por las ejecuciones de los métodos commit y rollback hasta el siguiente commit.

* Hay que planificar bien la app para minimizar el tiempo en el que se tengan las transacciones abiertas ejecutándose, ya que consumen recursos y suponen bloqueos en la DB que puede parar otras transacciones.*


CONSULTAS AL DICCIONARIO DE DATOS
DatabaseMetaData, interfaz de la API java.sql, permite obtener información sobre la DB en su conjunto.

Algunos métodos de DatabaseMetaData devuelven listas de información en forma de objetos ResultSet, que se pueden recorrer para obtener metadatos, se utiliza para ello los metodos getString/Int ...
Algunos métodos tienen argumentos que son patrones de cadena, es posible usar patrones dentro de las cadenas:
    % -> cualquier subcadena de 0 o más caracteres
    _ -> un caracter.

Métodos Útiles:
    -> getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern);
Devuelve en un ResultSet la descripción de las columnas de la tabla disponibles en el catálogo especificado.
    -> getDriverName();
Devuelve en un String el nombre del controlador JDBC.
    -> getDriverVersion();
Devuelve en un String el número de versión de este controlador JDBC como a String.
    -> getExportedKeys(String catalog, String schema, String table);
Devuelve un ResultSet la descripción de las columnas de clasve Foranea que hacen referencia a las columnas de clave principal de la tabla dada.
    -> getFunctions(String catalog, String schemaPattern, String functionNamePattern);
Devuelve un ResultSet con la descripción del sistema y las funciones de usuario disponibles en el catálogo dado.
    -> getMaxConnections();
Recupera el número máximo de conexiones simultáneas a esta base de datos que son posibles.
    -> getPrimaryKeys(String catalog, String shcema, String table);
Devuelve un ResultSet con una descrición de las columnas de clave primaria de la tabla dada.
    -> getProcedures(String catalog, String schemaPattern, String procedureNamePattern);
Recupera una descripción de los procedimientos almacenados disponibles en el catálogo dado.
    -> getSchemas();
Devuelve en un ResultSet los nombres del esquema disponibles en esta base de datos.
    -> getSQLKeywords();
Recupera una lista separada por comas de todas las palabras clave de SQL de esta DB que NO son también palabras clave se SLQ:2003.
    -> getStringFunctions();
Recupera una lista deparada por comas de funciones de cadena disponibles con esta base de datos.
    -> supportsAltersTableWithAddColumn();
Recupera si esta base de datos admite ALTER TABLE con añadir columna, devuelve un booleano.
    -> supportsTransactions();ç
Recupera si esta base de datos admite transacciones.


RECUPERACIÓN Y MODIFICACIÓN DE VALORES DE ResultSet





























  
