INTRODUCCIÓN

PERSISTENCIA DE DATOS, capacidad de conservar datos una vez apagado el equipo o aplicación que está utilizandolos.

ARCHIVO, un conjunto de bits almacenados en un dispositivo. Un equipo los utiliza para guardar los datos.
Los ficheros están grabados en un soporte.


CONCEPTOS - USO DE FICHEROS EN JAVA

Caracteristicas:
  - Se ubican en directorios.
  - Tienen un nombre único en el directorio o carpeta que los contiene.
  - La extensión nos permite conocer el tipo de fichero.

I/O (Input/Output), son las operaciones que constituyen un flujo de información del sistema con el exterior.

Cuando leemos o escribimos sobre un archivo enviamos flujos de datos como texto o como bytes.

Java implementa el acceso a ficheros con Streams, que sería una secuencia de bytes, pero incorpora también funciones para utilizar almacenamiento o Buffer intermedio,
que optimice las lecturas y escrituras en el fichero físico.

Paquete estándar de la API de Java -> java.io y el paquete-> java.nio proporcionan las operaciones de E/S.

TIPOS DE FICHEROS
  -> FICHEROS DE TEXTO O DE CARACTRES, el contenido del fichero contiene exclusivamente caracteres de texto. (Se puede leer con un simple editor de texto).
    * .txt   -> Fichero de texto plano.
    * .xml   -> Fichero XML.
    * .json  -> Fichero de intercambio de información
    * .props -> Fichero de propiedades.
    * .conf  -> Fichero de configuración.
    * .sql   -> Script SQL.
    * .csv   -> Fichero de datos.
  -> FICHEROS BINARIOS O DE BYTES, ficheros compuestos por caracteres, pueden contener imágenes, videos, audios, datos, entre otros.
    * .pdf   -> Fichero pdf.
    * .jpg   -> Fichero de imagen.
    * .doc/x -> Fichero de Microsoft Word.
    * .avi   -> Fichero de Vídeo.
    * .ppt/x -> Fichero de Power Point.


FORMAS DE ACCESO A FICHEROS
  -> ACCESO SECUENCIAL, no se pueden hacer saltos de posición con el cursor una vez abierto el fichero:
    * Las lecturas se realizan en orden, desde el inicio al final de fichero.
    * Las escrituras se realizan en el sitio donde se haya finalizado la última escritura.
  -> ACCESO ALEATORIO, las escrituras y lecturas se realizan en cualquier puento del fichero.


STREAMS, flujos de datos (binarios o de caracteres) entre el programa y el fichero directamente.
FLUJO, es una abstracción de todo aquello que produce o consume informacion, una secuencia de bytes entre un origen y un destion, que no se almacenan en ningún sitio intermedio.

BUFFER, zona de almacenamiento temporal, la conexión no se realiza directamente en el destino, sino que los bytes se almacenan de forma intermedia y ahí podemos realizar movimientos hacia delante o hacia atrás.
Los datos se pasan al fichero por bloques cuandose hayan llenado, o cuando cerremos la operación de escritura.
La lectura se realiza igual, se lee un bloque y se van pasando al programa según los necesite.

CLASES UTILIZADAS POR JAVA
Incorporan interfaces, clases y excepciones para acceder a todo tipo de ficheros y de distintas formas.

Libreria java.io, contiene las clases necesarias para gestionar las operaciones de entrada y salida con Java, nos van ha permitir fundamentalmente:
  -> Leer entradas de un flujo de datos.
  -> Escribir entradas a un flujo de datos.
  -> Operar con ficheros en el sistema de ficheros local.
  -> Gestionar la serialización de objetos.

Libreria java.nio (Non-Bloquing I/O), ofrece una forma diferente de trabajar con I/O que las API de I/O estándar. Se basa en el "Buffer" y el "Channel"
Entres otras ventajas, tendremos la posiblidad de utilizar programación asíncrona de E/S, obtener información de atributos propios del sistema de archivos,
reconocimiento de enlaces simbólicos y facilitado de algunas operaciones básicas.
Características:
  -> Define interfaces y clases para que la máquina virtual Java tenga acceso a archivos, atributos de archivos y sistemas de archivos.
  -> Utilización de canales y bufferes, los datos siempre se leen de un canal a un búfer, o se escriben desde un búfer a un canal.
  -> IO sin bloqueo, permite hacer IO sin bloqueo, desde un hilo podemos pedirle a un channel que lea datos en un buffer. 
      Mientras el canal lee datos en el búfer, el hilo puede hacer otra cosa, una vez se leen los datos en el búfer, el hilo puede continuar procesándolo, ocurre lo mismo para escribir datos en channels.
  -> Selectores, objeto que puede gestionar múltiples channes para eventos (conexión abiert, datos recibidos, ...). Permite que un solo hilo maneje múltiples channels.

java.io ó java.nio:
  -> java.nio, permite manejar múltiples canales (archivos o conexiones a red) con uno o unos pocos hilos.
  -> java.nio, procesamiento de datos más complicado que usar los streams bloqueantes de java.io.
  -> java.nio, la opción si se necesita manejar cientos de conexiones (canales) abiertas y en cada una manejar una pequeña cantidad de datos.
  -> java.io, la opción si se manejan pocas conexiones con un alto ancho de banda (envio de mucha información a la vez).


CLASES ASOCIADAS A LAS OPERACIONES DE GESTIÓN DE FICHEROS Y DIRECTORIOS
A partir de la version JSE7 tenemos:
  -> La clase Paths, tiene sólo un método get, que devuelve un elemento de tipo Path.
  -> La interfaz Path, tiene varios métodos que se encargan de la gestión de rutas y características de las mismas y de los ficheros.
  -> La clase Files, tiene métodos de creación de ficheros, carpetas, borrado y modificación de rutas, además de manejo de escritura y lectura en ficheros.

MANEJO DE RUTAS (PATHS)
RUTA ESPECÍFICA, dentro de la estructura jerárquica de directorios, es el camino para llegar a un fichero determinado, desde donde estamos situados
  -> RUTA ABSOLUTA, contiene la ruta completa desde la raíz del sistema de archivos hasta el archivo o directorio al que apunta.
  -> RUTA RELATIVA, contiene la ruta al archivo o directorio desde alguna otra ruta.

Segun el SO la ruta de los ficheros:
  - Windows, C:\datos\fichero.txt
  - Linux, /home/datos/fichero.txt
  - Mac OS, /Biblioteca/Tipos de latra/

La interfaz java.nio.file.Path representa un path.
Un path puede señalar a un archivo o un directorio.


INTERFACE FilenameFileter
Se puede usar para crear filtros que establezcan criterios de filtrado relativos al nombre de los ficheros.

Una clase que lo implemente debe definir e implementar el método:
  -> boolean accept (File dir, String nombre), devolverá true si el fichero cuyo nombre se indica aparezca en la lista de fichero del directorio indicado.


LECTURA Y ESCRITURA EN FICHEROS

ACCESOS
  -> SECUENCIAL, lectura de forma secuencial de inicio a fin del archivo, en estos ficheros tendremos como operaciones más comunes:
    - Creación de ficheros o apertura para leer, guardar/borrar datos.
    - Copia de datos de un fichero a otro.
    - Búsqueda de información
  -> ALEATORIO, acceso aleatornio, permite acceder a los datos de forma no secuencial.
    - Búsqueda de información.
    - Actualización de elementos.
    - Inserción de información en parte del fichero.
  -> CONCATENACIÓN (PIPES), conexiones entre programas que se ejecutan simultáneamente dentro de una misma máquina, 
                            de modo que lo que uno produce se envia por un extremo de "tubo" para ser recibido por otro que espera a la salida.

Clases Reader y Writer, son las recomendadas para trabajr con ficheros de texto.
Las subclases que permiten trabajar con ficheros de texto son:
  -> FileReader, para lectura desde un fichero de texto, crea un flujo de entrada que trabaja con caracteres en vez de bytes.
  -> FileWriter, para la escritura hacia un fichero de texto, crea un flujo de dalida que trabaja con caractres en vez de bytes.

Tambien se puede montar un buffer sobre cualquiera de los flujos que definen estas clases:
  -> BufferedWriter, se usa para montar un buffer sobre el flujo de salida de tipo FileWriter.
  -> BufferedReader, se usa para montar un buffer sobre el flujo de entrada de tipo FileReader.


LECTURA Y ESCRITURA SECUENCIAL DE FICHEROS COMPLETOS

java.nio -> archivo tipo Bytes -> byte[] Files.readAllBytes(Path path), lee un archivo completo devolviendo un array de bytes.
java.nio -> archivo tipo Bytes -> Path Files.write(Paht path, byte[]), escribe todos los bytes en el path de salida de una sola vez.
java.nio -> archivo tipo Caracteres -> List<String>Files.readAllLineas(Path path), lee un archivo completo devolviendo una lista de String.
java.nio -> archivo tipo Caracteres -> Path Files.write(Path path, List<String>), escribe en un archivo una lista de Strings, cada uno en una línea distinta.

Podemos proteger un fichero contra lecturas, escrituras indeseadas o borradod de contenido asignando un modo de acceso al mismo.
En Java se definen una serie de modos de acceso a un fichero a través del parámetro OpenOption (java.nio), 
lo más cómodo es usar este parámetro a traves del enum StandardOpenOption que puede tomar los siguientes valores entre otros:
  -> StandardOpenOption.WRITE, habilita la escritura en el fichero.
  -> StandardOpenOtion.APPEND, todo lo escrito al fichero se hará al final del mismo.
  -> StandarOpenOption.CREATE_NEW, crea un fichero nuevo y lanza una excepción si ya existía.
  -> StandarOpenOption.CREATE, crea el fichero si no existe y simplemente lo abre si ya existía.
  -> StandarOpenOption.TRRUNCATE_EXISTING, si el fichero existe, y tiene contenido, se ignora su contenido para sobreescribirlo desde el principio.


LECTURA Y ESCRITURA SECUENCIAL CON Streams

Java define 2 tipos de flujos en el paquete java.io:

  -> Byte streams (8 bits), proporciona lo necesario para la gestión de I/O de bytes y su uso está orientado a la lectura y escritura de datos binarios.
El tratamiento del flujo de bytes viene determinado por las clases abastractas InputStream y OutputStream.
Las clases principales que heredan de OutputStream, para la escritura de binarios son:
    -> FileOutputStream, escribe bytes en un fichero, si el archivo existe, se borrará. Para añadri datos al final de éste hbar que usar el consturctor FileOutputStream(String filePaht, boolean append); con append=true.
    -> ObjectOutputStream, convierte objetos y variables en vectores de bytes que pueden ser escritos en un OutputStream.
    -> DataOutputStream, da formato a los tipos primitivos y objetos String, convirtiendolos en un flujo de forma que cualquier DataInputStream los pueda leer.
De InputStream, para lectura de binarios, destacamos:
    -> FileInputStream, lee bytes de un fichero.
    -> ObjectInputStream, convierte en objetos y varibles los vectores de bytes leídos en un InputStream.

  -> Character streams (16 bits), están determinados por 2 clases abstractas, que manejan los flujos de caracteres Unicode y de ellas se derivan subclases concretas que implementan métodos.
Las clases de Writer y Reader que permiten trabajar con ficheros de texto son:
    -> FileReader, para la lectura, crea un flujo de entrada que trabaja con caracters en ves de con bytes.
    -> FileWriter, para la escritura, crea un flujo de entrada que trabaja con caracteres.

Los streams, al ser un recurso finito, deben cerrarse una vez utilizados con el método close();.


LECTURA Y ESCRITURA SECUENCIAL CON Buffer
Cuando queresmos realizar la lectura o escritura utilizando un buffer intermedio, tanto de bytes como de caracteres, podemos hacer uso de los siguientes métodos:
  -> Cadena de caracteres (con codificación) -> java.nio -> String java.io.BufferedReader.readLine() throws IOException                        -> Lee una línea de texto del fichero y devuelve un String.
  -> Bytes                                   -> java.nio -> void java.io.BufferedWriter.write(String s, int off, int len) trhows IOException   -> Escribe un String en un fichero.
  -> Caracteres                              -> java.nio -> newLine()                                                                          -> Generamos un retorno de carro en el fichero.

Debemos cerrar el BufferedReader y el BufferedWriter una vez utilizado con el método close() y será en este momento en el que se vuelquen al fichero los datos a escribir.


OPERACIONES CON FICHEROS ALEATORIOS
EL INDICE o PUNTERO se usa para marcar el lugar del recorrido en el que se encuentra en cada momento.

* Las clases de la libreria java.nio nos permiten no bloquear el fichero al realizar las operaciones.
El procesamiento es más complejo.
La lectura del fichero finaliza cuando read nos devuelve -1.

* RandomAccessFile, clase utilizada por java.io que nos permite la lectura y/o escritura de ficheros de acceso aleatorio.
    - Permite leer y escribir sobre el fichero, no son necesarisas clases diferentes.
    - Necesita especificar el modo de acceso al construir un objeto de esta clase -> only read or only write.
    - Posee métodos especificos de desplazamiento, para movernos de un registro a otro del fichero, o posicionarnos en una posición concreta del fichero.

Constructores:
    -> RandomAccessFile (File file, String mode).
    -> RandomAccessFile (String name, String mode).
Modo "r" -> si se abre en modo read.
Modo "rw" -> si se abre en modo read & write.


SERIALIZACIÓN DE OBJETOS






















