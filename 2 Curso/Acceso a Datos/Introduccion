INTRODUCCIÓN AL ACCESO A DATOS

INTRODUCCIÓN

En la mayoría de las aplicaciones informáticas se pueden diferenciar, a grandes rasgos, 2 bloques:
  -> EL PROGRAMA, que realiza las operaciones deseadas con los datos necesarios.
  -> LOS DATOS con los que opera el programa, pueden ser obtenidos mediante diversos métodos.

Es necesario que los datos PERSISTAN, para que cuando el programa termine su ejecución, no se pierdan y puedan ser recuperados posteriormente.


ACCESO A DATOS

Estrategias de acceso a datos para gestionar la persistencia de los datos:
  -> Mediante FICHEROS.
  -> BASES DE DATOS:
    -> Relacionales.
    -> Orientadas a Objetos.
    -> Objeto-Relacionales.
    -> Bases de Datos XML (eXtensible Markup Lanjuage).
    -> Bases de datos NoSQL.
  -> MAPEO OBJETO RELACIONAL (ORM).
  -> COMPONENTES.

Ventajas de las Bses de Datos, permiten:
    -> Eliminar el problema de la información redundante.
    -> Eliminar información inconsistente.
    -> Globalizar o Centralizar la información.
    -> Garantizar el mantenimento de la integridad de la información, solo se almacena la información correcta.
    -> Independencia de datos, implica la separación entre programas y datos, si se realizan cambios en la información sin tener que hacer cambio en aplicaciones o programas.


FICHEROS

Actualmente se usan ficheros que guardan los datos siguiendo un patrón o estructura bien definida.
FICHEROS XML, archivos de texto, no necesitan software propietario para interpretarse, tienen extensión xml. Las DBA actuales emplean ficheros XML para guardar sus datos.


BASES DE DATOS

Sistema de información orientado hacia los datos, que pretende recuperar y almacenar la información de manera eficiente y cómoda.

VENTAJAS CON RESPECTO A LOS SITEMAS DE ARCHIVOS CONVENCIONALES
  -> INDEPENDENCIA de los datos respecto a los procedimientos.
  -> Disminución de las REDUNDANCIAS y, en consecuencia.
    -> Disminución de posibles INCONSISTENCIAS DE DATOS.
    -> Mayor DISPONIBILIDAD de los datos.
    -> Mayor SEGURIDAD de los datos.
    -> Mayor PRIVACIDAD de los datos.
    -> Mayor EFICIENCIA en la recogida, codificación y entrada en el sistema.
    -> COMPARTICIÓN de los datos, se puede acceder a los datos por varios usuarios simultáneamente, teniendo previstos procedimientos para salvaguardar su integridad.

Se usa un sistema de ficheros convencional cuando la cantidad de datos a guardar es tan reducida que no justifica las desventajas del uso de los sistemas de bases de datos.


BASES DE DATOS RELACIONALES

Su propósito es proporcional un método declarativo para especificar datos y consultas.
Son adecuadas para manejar grandes cantidades de datos, compartir datos entre programas, realizar búsquedas rápidas, etc.
Como desventaja, no presentan un buen modelo de las relaciones entre los datos, ya que todo se representa como tablas bidimensionales.

Facts about DB:
  -> Robustas.
  -> Permiten interoperabilidad entre aplicaciones.
  -> Permiten una forma de compartir datos entre aplicaciones.
  -> Son el común denominador de muchos sistemas y tecnologías.

Otros modelos tradicionales:
  -> Modelo Jerárquico.
  -> Modelo en Red.


BD ORIENTADAS A OBJETOS - OODB

Soportan un modelo de objetos puro.
El lenguaje de programación y el esquema de la base de datos utilizan ls mismas definiciones de tipos.

Aplicaciones actuales:
  -> Soporte de objetos complejos y datos multimedia.
  -> Jerarquías de objetos o tipos y herencia.
  -> Gestión de Versiones.
  -> Modelos extensibles mediante tipos de datos definidos por el usuario.
  -> Integración de los datos con sus procedimientos asociados.
  -> Manipualción navegacional y de conjunto de registros.
  -> Interconexión e Interoperabilidad.


BASES DE DATOS NoSQL - No solo SQL
Un enfoque de diseño de base de datos que permite almacenar y consultar datos sin utilizar las estructuras tradicionales
que se encuentran en las bases de datos relacionales, es decir, no almacenan susdatos en tablas.

Tipos de bases de datos NoSQL:
  -> Pares clave-valor, se organiza en un diccionario de pares, donde cada elemento tiene una clave y un valor.
  -> Orientadas a documentos, pueden ser úteles en la gestion de datos semiestructurados.
  -> Orientadas a gráfos, alberga datos de un grafo de conocimiento, los elementos de datos se almacenan como nodos, aristas y propiedades.
     Cualquier objeto puede ser un nodo. Una arista define la relalción entre los nodos.
  -> Tabulares, usan un formato tabular que permite variar como se nombran y formatean los datos en cada fila dentro de la misma tabla.
     Este tipo acelera las consultas al almacenar los datos en columna.


ACCESO A BASE DE DATOS MEDIANTE CONECTORES

Un DRIVER JDBC es un componente sofware que posiblita a una aplicación Java interaccionar con una base de datos.
Define interfaces y clases para escribir aplicaciones de bases de datos en Java realizando conexiones de base de datos.
Mediante JDBC se pueden enviar sentencias SQL y PL/SQL a una base de datos relacional, permite embeber SQL dentro de códiogo Java.


MAPEO OBJETO RELACIONAL - ORM

Consiste en una técnica de programación para convertir datos entre el sistema de tipos utilizado en un lenguaje de programación orientada a objetos
y el sistema utilizado en una base de datos relacional.

DESFASE OBJETO-RELACIONAL problema de compabilidad entre los dos paradigmas de trabajar con OOP Y RDB 
(el modelo relacional trata con relaciones y conjuntos, es de naturaleza matemática y la programacion orientada a objetos trata con objetos, atribuotas y asociaciones de unos con otros)
que surje cuando se requiere almacenar la información de objetos utilizando una base de datos relacional.


CAPA DE PERSISTENCIA Y FRAMEWORK DE MAPEO

La capa de persistencia de una aplicación es la pieza que permite almacenar, recuperar, actualizar y eliminar el estado de los objetos que necesitan persistir en un sistema gestor de datos.

Un mapeo objeto-relacional es una capa que permite relacional objetos con un modelo de datos relacional, ocultando todo el mecanismo de conexión al motor de la base de datos,
y también no teniendo que escribir las sentencias SQL necesarias para la gestión de los datos.

La capa de persistencia traduce entre los dos modelos de datos:
  -> Desde objetos a registros.
  -> Desde registro a objetos.
Entonces la capa de persistencia llama al MOTOR DE PERSISTENCIA, traduce el objeto a registros y llama a la base de datos para que los guarde.

Hay 3 comunidades que están implicadas en el mundo de la persistencia O/R de Java de forma activa
  -> Organizaciones basadas en el estándar.
  -> Comunidades código abierto.
  -> Grupos comerciales.

Cada uno de los mecanismos de mapeo O/R tiene una dependencia particular en el conector JDBC para poder comunicarse con la base de datos de una forma eficiente.
Si el conector JDBC que participa en la comunicación no es óptimo, la posible eficiencia de cualquier framework quedará debilitada.


DESARROLLO DE COMPONENTES

Un COMPONENTE es una unidad se software con una función e interfaz bien definidas. Posee interfaces especificadas contractualemnte, pudiendo ser desplegado
indipendientemente y puede interaccionar con otros componentes para formar un sistema.

Un INTERFAZ es un punto de acceso a los componentes, permite a los clientes acceder a los servicios proporcionados por un componentes.

Un JavaBean es un componente software reutilizable basado en la especificación JavaBean de Sun(Oracle) que se puede manupular visualmente con una herramienta de desarrollo.
Propiedades que presenta un JavaBean:
  -> PORTABILIDAD.
  -> REUSABILIDAD.
  -> INTROSPECCIÓN.
  -> PERSONALIZACIÓN.
  -> PERSISTENCIA.
  -> COMUNICACIÓN ENTRE EVENTOS.


HERRAMIENTAS UTILIZADAS EN EL MODULO
  -> NetBeans & Eplipse, IDE Integrated Development Environment
  -> Hibernate Tools (Plugin):
    -> Editor de mapeo, para los archivos SML, compatible con autocompletado y resaltado de sintaxis.
    -> Consola, permite configurar conexiones de DB, proporcioona viisualización de clases y sus relaciones, permite ejecutar consultas HQL
    -> Ingeniería inversa, puede generar clases de modelo de dominio y archivos de mapeo, documentación HTML, incluso una aplicacion JBoss Seam completa.
    -> Wizards, proporcionas varios asistentes.
    -> Tarea Ant, permite ejecutar generación de esquema, de mapeo o de código Java como parte de su compilación.
  -> JDBC, Java Database Connectivity, una API(Aplication Programming Interface) para java que define cómo un cliente puede acceder a una base de datos.


DATABASE MANAGMENT SYSTEM
Es un sistema que permite la creación, gestión y administración de bases de datos, así como la elección y manejo de las estructuras necesarias
para el almacenamiento y búsqueda de la información del modo más eficiente posible.

ORACLE - MYSQL - SQLite


BASES DE DATOS ORIENTADAS A DOCUMENTOS

DB XML

  DB XML ENABLED, la extensión de la conversión de documentos XML.
La información se almacena en tablas, que se dividen en filas que contienen los registors, y columnas que contienen los campos.
Permite obtener los resultados de las consultas en formato XML.
No se trata por tanto de una DB orentada a documentos.

  DB XML NATIVA
No posee campos ni tablas, almacena documentos XML, se denomina con frecuenci DB centrada u orientada a documentos.


BASES DE DATOS MongoDB
En esta no existen las transiciones, auque pude simularlas.
Solo garantiza operaciones atómicas a nivel de documento.
Guarda los datos en documentos, que son almacenados en BSON(una representación binaria de JSON)
























